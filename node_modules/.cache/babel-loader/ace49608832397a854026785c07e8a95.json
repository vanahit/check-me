{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\src\\\\containers\\\\QuizCreator\\\\QuestionCreater\\\\Forms\\\\Form.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Form.css';\n\nvar Form =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Form, _Component);\n\n  function Form() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Form);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Form)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isValidated: false\n    };\n\n    _this.validate = function () {\n      var formLength = _this.formEl.length;\n\n      if (_this.formEl.checkValidity() === false) {\n        for (var i = 0; i < formLength; i++) {\n          var elem = _this.formEl[i];\n          var errorLabel = elem.parentNode.querySelector('.invalid-feedback');\n\n          if (errorLabel && elem.nodeName.toLowerCase() !== 'button') {\n            if (!elem.validity.valid) {\n              errorLabel.textContent = elem.validationMessage;\n            } else {\n              errorLabel.textContent = '';\n            }\n          }\n        }\n\n        return false;\n      } else {\n        for (var _i = 0; _i < formLength; _i++) {\n          var _elem = _this.formEl[_i];\n\n          var _errorLabel = _elem.parentNode.querySelector('.invalid-feedback');\n\n          if (_errorLabel && _elem.nodeName.toLowerCase() !== 'button') {\n            _errorLabel.textContent = '';\n          }\n        }\n\n        ;\n        return true;\n      }\n    };\n\n    _this.submitHandler = function (event) {\n      event.preventDefault();\n\n      if (_this.validate()) {\n        _this.props.submit();\n      }\n\n      _this.setState({\n        isValidated: true\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Form, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var props = _toConsumableArray(this.props);\n\n      var classNames = [];\n\n      if (props.className) {\n        classNames = _toConsumableArray(props.className);\n        delete props.className;\n      }\n\n      if (this.state.isValidated) {\n        classNames.push('.was-validated');\n      }\n\n      return React.createElement(\"form\", Object.assign({\n        ref: function ref(form) {\n          return _this2.formEl = form;\n        },\n        onSubmit: this.submitHandler\n      }, props, {\n        className: classNames,\n        noValidate: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }), this.props.children);\n    }\n  }]);\n\n  return Form;\n}(Component);\n\nForm.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  submit: PropTypes.func.isRequired\n};\nexport default Form;","map":{"version":3,"sources":["C:\\Users\\Gohar\\Desktop\\testing-project\\testing-project\\src\\containers\\QuizCreator\\QuestionCreater\\Forms\\Form.js"],"names":["React","Component","PropTypes","Form","state","isValidated","validate","formLength","formEl","length","checkValidity","i","elem","errorLabel","parentNode","querySelector","nodeName","toLowerCase","validity","valid","textContent","validationMessage","submitHandler","event","preventDefault","props","submit","setState","classNames","className","push","form","children","propTypes","node","string","func","isRequired"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Form.css';\r\n\r\nclass Form extends Component {\r\n    state = {\r\n        isValidated: false\r\n    }\r\n\r\n    validate = () => {\r\n        const formLength = this.formEl.length;\r\n\r\n        if (this.formEl.checkValidity() === false) {\r\n            for(let i=0; i<formLength; i++) {\r\n                const elem = this.formEl[i];\r\n                const errorLabel = elem.parentNode.querySelector('.invalid-feedback');\r\n\r\n                if (errorLabel && elem.nodeName.toLowerCase() !== 'button') {\r\n                    if (!elem.validity.valid) {\r\n                        errorLabel.textContent = elem.validationMessage;\r\n                    } else {\r\n                        errorLabel.textContent = '';\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        } else {\r\n            for(let i=0; i<formLength; i++) {\r\n                const elem = this.formEl[i];\r\n                const errorLabel = elem.parentNode.querySelector('.invalid-feedback');\r\n                if (errorLabel && elem.nodeName.toLowerCase() !== 'button') {\r\n                    errorLabel.textContent = '';\r\n                }\r\n            };\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (this.validate()) {\r\n            this.props.submit();\r\n        }\r\n\r\n        this.setState({isValidated: true});\r\n    }\r\n\r\n    render() {\r\n        const props = [...this.props];\r\n\r\n        let classNames = [];\r\n        if (props.className) {\r\n            classNames = [...props.className];\r\n            delete props.className;\r\n        }\r\n\r\n        if (this.state.isValidated) {\r\n            classNames.push('.was-validated');\r\n        }\r\n\r\n        return (\r\n            <form ref={form => this.formEl = form} onSubmit={this.submitHandler} {...props} className={classNames} noValidate>\r\n                {this.props.children}\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nForm.propTypes = {\r\n    children: PropTypes.node,\r\n    className: PropTypes.string,\r\n    submit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}