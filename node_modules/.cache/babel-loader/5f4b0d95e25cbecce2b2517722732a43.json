{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { getCompaniesStarted, getCompaniesSuccess, getCompaniesFailure, getTestsStarted, getTestsFailure, getTestsSuccess, getUsersStarted, getUsersFailure, getUsersSuccess, editingTest } from '../actions/appAction';\nimport { firebase } from '../../firebase/firebase';\nimport { addEditingQuestions } from '../actions/testCreator';\nexport var getTests = function getTests() {\n  return function (dispatch) {\n    dispatch(getTestsStarted());\n    firebase.database().ref('tests').on('value', function (snapshot) {\n      var tests = [];\n      snapshot.forEach(function (childSnapshot) {\n        tests.push(_objectSpread({\n          key: childSnapshot.key\n        }, childSnapshot.val()));\n      });\n      dispatch(getTestsSuccess(tests));\n    });\n  };\n};\nexport var getCompanies = function getCompanies() {\n  return function (dispatch) {\n    dispatch(getCompaniesStarted());\n    firebase.database().ref('companies').on('value', function (snapshot) {\n      var companies = [];\n      snapshot.forEach(function (childSnapshot) {\n        companies.push(_objectSpread({\n          id: childSnapshot.key\n        }, childSnapshot.val()));\n      });\n      dispatch(getCompaniesSuccess(companies));\n    });\n  };\n};\nexport var getUsers = function getUsers() {\n  return function (dispatch) {\n    dispatch(getUsersStarted());\n    firebase.database().ref('user').on('value', function (snapshot) {\n      var users = [];\n      snapshot.forEach(function (childSnapshot) {\n        users.push(_objectSpread({\n          id: childSnapshot.key\n        }, childSnapshot.val()));\n      });\n      dispatch(getUsersSuccess(users));\n    });\n  };\n};","map":{"version":3,"sources":["C:\\Users\\Gohar\\Desktop\\testing-project\\testing-project\\src\\store\\thunks\\thunks.js"],"names":["getCompaniesStarted","getCompaniesSuccess","getCompaniesFailure","getTestsStarted","getTestsFailure","getTestsSuccess","getUsersStarted","getUsersFailure","getUsersSuccess","editingTest","firebase","addEditingQuestions","getTests","dispatch","database","ref","on","snapshot","tests","forEach","childSnapshot","push","key","val","getCompanies","companies","id","getUsers","users"],"mappings":";AAAA,SAAQA,mBAAR,EACQC,mBADR,EAEQC,mBAFR,EAGQC,eAHR,EAIQC,eAJR,EAKQC,eALR,EAMQC,eANR,EAOQC,eAPR,EAQQC,eARR,EASQC,WATR,QAUW,sBAVX;AAWA,SAAQC,QAAR,QAAuB,yBAAvB;AACA,SAASC,mBAAT,QAAoC,wBAApC;AAEA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAC1B,SAAO,UAAAC,QAAQ,EAAI;AACfA,IAAAA,QAAQ,CAACV,eAAe,EAAhB,CAAR;AAEAO,IAAAA,QAAQ,CAACI,QAAT,GAAoBC,GAApB,CAAwB,OAAxB,EAAiCC,EAAjC,CAAoC,OAApC,EAA6C,UAACC,QAAD,EAAc;AAC3D,UAAIC,KAAK,GAAG,EAAZ;AACCD,MAAAA,QAAQ,CAACE,OAAT,CAAiB,UAAAC,aAAa,EAAI;AAC9BF,QAAAA,KAAK,CAACG,IAAN;AACIC,UAAAA,GAAG,EAAEF,aAAa,CAACE;AADvB,WAEOF,aAAa,CAACG,GAAd,EAFP;AAKA,OANJ;AAOGV,MAAAA,QAAQ,CAACR,eAAe,CAACa,KAAD,CAAhB,CAAR;AACH,KAVD;AAWH,GAdD;AAeH,CAhBM;AAkBP,OAAO,IAAMM,YAAY,GAAG,SAAfA,YAAe,GAAM;AAC9B,SAAO,UAAAX,QAAQ,EAAI;AACfA,IAAAA,QAAQ,CAACb,mBAAmB,EAApB,CAAR;AAEAU,IAAAA,QAAQ,CAACI,QAAT,GAAoBC,GAApB,CAAwB,WAAxB,EAAqCC,EAArC,CAAwC,OAAxC,EAAiD,UAACC,QAAD,EAAc;AAC3D,UAAIQ,SAAS,GAAG,EAAhB;AAEAR,MAAAA,QAAQ,CAACE,OAAT,CAAiB,UAAAC,aAAa,EAAI;AAC9BK,QAAAA,SAAS,CAACJ,IAAV;AACKK,UAAAA,EAAE,EAAEN,aAAa,CAACE;AADvB,WAEQF,aAAa,CAACG,GAAd,EAFR;AAIH,OALD;AAOAV,MAAAA,QAAQ,CAACZ,mBAAmB,CAACwB,SAAD,CAApB,CAAR;AACF,KAXF;AAYF,GAfF;AAgBF,CAjBK;AAmBP,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,GAAM;AAC1B,SAAO,UAAAd,QAAQ,EAAI;AACfA,IAAAA,QAAQ,CAACP,eAAe,EAAhB,CAAR;AAEAI,IAAAA,QAAQ,CAACI,QAAT,GAAoBC,GAApB,CAAwB,MAAxB,EAAgCC,EAAhC,CAAmC,OAAnC,EAA4C,UAACC,QAAD,EAAc;AACtD,UAAIW,KAAK,GAAG,EAAZ;AACCX,MAAAA,QAAQ,CAACE,OAAT,CAAiB,UAAAC,aAAa,EAAI;AAC/BQ,QAAAA,KAAK,CAACP,IAAN;AACKK,UAAAA,EAAE,EAAEN,aAAa,CAACE;AADvB,WAEQF,aAAa,CAACG,GAAd,EAFR;AAIH,OALA;AAMDV,MAAAA,QAAQ,CAACL,eAAe,CAACoB,KAAD,CAAhB,CAAR;AACF,KATF;AAUF,GAbF;AAcF,CAfK","sourcesContent":["import {getCompaniesStarted, \r\n        getCompaniesSuccess, \r\n        getCompaniesFailure,\r\n        getTestsStarted, \r\n        getTestsFailure, \r\n        getTestsSuccess,\r\n        getUsersStarted,\r\n        getUsersFailure,\r\n        getUsersSuccess,\r\n        editingTest,\r\n    } from '../actions/appAction';\r\nimport {firebase} from '../../firebase/firebase';\r\nimport { addEditingQuestions } from '../actions/testCreator';\r\n\r\nexport const getTests = () => {\r\n    return dispatch => {\r\n        dispatch(getTestsStarted());\r\n        \r\n        firebase.database().ref('tests').on('value', (snapshot) => {\r\n\t       let tests = [];\r\n\t        snapshot.forEach(childSnapshot => {\r\n\t            tests.push({\r\n\t                key: childSnapshot.key,\r\n\t                ...childSnapshot.val()\r\n                }) \r\n               \r\n            });\r\n            dispatch(getTestsSuccess(tests));\r\n        });\r\n    }  \r\n};\r\n\r\nexport const getCompanies = () => {\r\n    return dispatch => {\r\n        dispatch(getCompaniesStarted());\r\n  \r\n        firebase.database().ref('companies').on('value', (snapshot) => {\r\n            let companies = [];\r\n\r\n            snapshot.forEach(childSnapshot => {\r\n                companies.push({\r\n                     id: childSnapshot.key,\r\n                     ...childSnapshot.val()\r\n                }) \r\n            });\r\n\r\n            dispatch(getCompaniesSuccess(companies));\r\n         });\r\n     }  \r\n };\r\n \r\nexport const getUsers = () => {\r\n    return dispatch => {\r\n        dispatch(getUsersStarted());\r\n\r\n        firebase.database().ref('user').on('value', (snapshot) => {\r\n            let users = [];\r\n             snapshot.forEach(childSnapshot => {\r\n                users.push({\r\n                     id: childSnapshot.key,\r\n                     ...childSnapshot.val()\r\n                }) \r\n            });\r\n            dispatch(getUsersSuccess(users));\r\n         });\r\n     }  \r\n };\r\n\r\n"]},"metadata":{},"sourceType":"module"}