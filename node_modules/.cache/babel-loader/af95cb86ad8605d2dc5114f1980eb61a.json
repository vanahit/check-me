{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util_1 = require(\"@firebase/util\");\n\nvar util_2 = require(\"../util/util\");\n\nvar util_3 = require(\"@firebase/util\");\n\nvar MAX_NODE;\n\nfunction setMaxNode(val) {\n  MAX_NODE = val;\n}\n\nexports.setMaxNode = setMaxNode;\n/**\n * @param {(!string|!number)} priority\n * @return {!string}\n */\n\nexports.priorityHashText = function (priority) {\n  if (typeof priority === 'number') return 'number:' + util_2.doubleToIEEE754String(priority);else return 'string:' + priority;\n};\n/**\n * Validates that a priority snapshot Node is valid.\n *\n * @param {!Node} priorityNode\n */\n\n\nexports.validatePriorityNode = function (priorityNode) {\n  if (priorityNode.isLeafNode()) {\n    var val = priorityNode.val();\n    util_1.assert(typeof val === 'string' || typeof val === 'number' || typeof val === 'object' && util_3.contains(val, '.sv'), 'Priority must be a string or number.');\n  } else {\n    util_1.assert(priorityNode === MAX_NODE || priorityNode.isEmpty(), 'priority of unexpected type.');\n  } // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n\n\n  util_1.assert(priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(), \"Priority nodes can't have a priority of their own.\");\n};","map":null,"metadata":{},"sourceType":"script"}