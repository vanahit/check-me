{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport { GET_TESTS_STARTED, GET_TESTS_SUCCESS, GET_TESTS_FAILURE, GET_USERS_STARTED, GET_USERS_SUCCESS, GET_USERS_FAILURE, GET_COMPANIES_STARTED, GET_COMPANIES_SUCCESS, GET_COMPANIES_FAILURE, ADD_USER_TEST, DELETE_USER_TEST, ADD_PASSING_TEST } from \"./actionTypes\";\nexport function getTestsSuccess(tests) {\n  return {\n    type: GET_TESTS_SUCCESS,\n    payload: _toConsumableArray(tests)\n  };\n}\n;\nexport function getTestsStarted() {\n  return {\n    type: GET_TESTS_STARTED\n  };\n}\n;\nexport function getTestsFailure(error) {\n  return {\n    type: GET_TESTS_FAILURE,\n    payload: {\n      error: error\n    }\n  };\n}\n;\nexport function getUsersSuccess(users) {\n  return {\n    type: GET_USERS_SUCCESS,\n    payload: _toConsumableArray(users)\n  };\n}\n;\nexport function getUsersStarted() {\n  return {\n    type: GET_USERS_STARTED\n  };\n}\n;\nexport function getUsersFailure(error) {\n  return {\n    type: GET_USERS_FAILURE,\n    payload: {\n      error: error\n    }\n  };\n}\n;\nexport function getCompaniesSuccess(companies) {\n  return {\n    type: GET_COMPANIES_SUCCESS,\n    payload: _toConsumableArray(companies)\n  };\n}\n;\nexport function getCompaniesStarted() {\n  return {\n    type: GET_COMPANIES_STARTED\n  };\n}\n;\nexport function getCompaniesFailure(error) {\n  return {\n    type: GET_COMPANIES_FAILURE,\n    payload: {\n      error: error\n    }\n  };\n}\n;\nexport function addUserTest(test) {\n  return {\n    type: ADD_USER_TEST,\n    test: test\n  };\n}\n;\nexport function deleteUserTest() {\n  return {\n    type: DELETE_USER_TEST\n  };\n}\n;\nexport function addPassingTest(test) {\n  return {\n    type: ADD_PASSING_TEST,\n    test: test\n  };\n}\n;","map":{"version":3,"sources":["C:\\Users\\Gohar\\Desktop\\testing-project\\testing-project\\src\\store\\actions\\appAction.js"],"names":["GET_TESTS_STARTED","GET_TESTS_SUCCESS","GET_TESTS_FAILURE","GET_USERS_STARTED","GET_USERS_SUCCESS","GET_USERS_FAILURE","GET_COMPANIES_STARTED","GET_COMPANIES_SUCCESS","GET_COMPANIES_FAILURE","ADD_USER_TEST","DELETE_USER_TEST","ADD_PASSING_TEST","getTestsSuccess","tests","type","payload","getTestsStarted","getTestsFailure","error","getUsersSuccess","users","getUsersStarted","getUsersFailure","getCompaniesSuccess","companies","getCompaniesStarted","getCompaniesFailure","addUserTest","test","deleteUserTest","addPassingTest"],"mappings":";AAAA,SAASA,iBAAT,EACQC,iBADR,EAEQC,iBAFR,EAGQC,iBAHR,EAIQC,iBAJR,EAKQC,iBALR,EAMQC,qBANR,EAOQC,qBAPR,EAQQC,qBARR,EASQC,aATR,EAUQC,gBAVR,EAWQC,gBAXR,QAaa,eAbb;AAeE,OAAO,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AACrC,SAAO;AACLC,IAAAA,IAAI,EAAEb,iBADD;AAELc,IAAAA,OAAO,qBACFF,KADE;AAFF,GAAP;AAMD;AAAA;AAED,OAAO,SAASG,eAAT,GAA4B;AACjC,SAAO;AACJF,IAAAA,IAAI,EAAEd;AADF,GAAP;AAGD;AAAA;AAED,OAAO,SAASiB,eAAT,CAA0BC,KAA1B,EAAiC;AACtC,SAAO;AACLJ,IAAAA,IAAI,EAAEZ,iBADD;AAELa,IAAAA,OAAO,EAAE;AACPG,MAAAA,KAAK,EAALA;AADO;AAFJ,GAAP;AAMD;AAAA;AAED,OAAO,SAASC,eAAT,CAA0BC,KAA1B,EAAiC;AACtC,SAAO;AACLN,IAAAA,IAAI,EAAEV,iBADD;AAELW,IAAAA,OAAO,qBACFK,KADE;AAFF,GAAP;AAMD;AAAA;AAED,OAAO,SAASC,eAAT,GAA4B;AACjC,SAAO;AACLP,IAAAA,IAAI,EAAEX;AADD,GAAP;AAGD;AAAA;AAED,OAAO,SAASmB,eAAT,CAA0BJ,KAA1B,EAAiC;AACtC,SAAO;AACLJ,IAAAA,IAAI,EAAET,iBADD;AAELU,IAAAA,OAAO,EAAE;AACPG,MAAAA,KAAK,EAALA;AADO;AAFJ,GAAP;AAMD;AAAA;AAGD,OAAO,SAASK,mBAAT,CAA8BC,SAA9B,EAAyC;AAC9C,SAAO;AACLV,IAAAA,IAAI,EAAEP,qBADD;AAELQ,IAAAA,OAAO,qBACFS,SADE;AAFF,GAAP;AAMD;AAAA;AAED,OAAO,SAASC,mBAAT,GAAgC;AACrC,SAAO;AACLX,IAAAA,IAAI,EAAER;AADD,GAAP;AAGD;AAAA;AAED,OAAO,SAASoB,mBAAT,CAA8BR,KAA9B,EAAqC;AAC1C,SAAO;AACLJ,IAAAA,IAAI,EAAEN,qBADD;AAELO,IAAAA,OAAO,EAAE;AACPG,MAAAA,KAAK,EAALA;AADO;AAFJ,GAAP;AAMH;AAAA;AAID,OAAO,SAASS,WAAT,CAAsBC,IAAtB,EAA4B;AACjC,SAAO;AACLd,IAAAA,IAAI,EAAEL,aADD;AAELmB,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID;AAAA;AAED,OAAO,SAASC,cAAT,GAA2B;AAChC,SAAO;AACLf,IAAAA,IAAI,EAAEJ;AADD,GAAP;AAGD;AAAA;AAED,OAAO,SAASoB,cAAT,CAAyBF,IAAzB,EAA+B;AACpC,SAAO;AACLd,IAAAA,IAAI,EAAEH,gBADD;AAELiB,IAAAA,IAAI,EAAJA;AAFK,GAAP;AAID;AAAA","sourcesContent":["import { GET_TESTS_STARTED, \r\n        GET_TESTS_SUCCESS, \r\n        GET_TESTS_FAILURE,\r\n        GET_USERS_STARTED, \r\n        GET_USERS_SUCCESS, \r\n        GET_USERS_FAILURE,\r\n        GET_COMPANIES_STARTED, \r\n        GET_COMPANIES_SUCCESS, \r\n        GET_COMPANIES_FAILURE,\r\n        ADD_USER_TEST,\r\n        DELETE_USER_TEST,\r\n        ADD_PASSING_TEST,\r\n\r\n      } from \"./actionTypes\";\r\n\r\n  export function getTestsSuccess(tests) {\r\n    return {\r\n      type: GET_TESTS_SUCCESS,\r\n      payload: [\r\n        ...tests\r\n      ]\r\n    }\r\n  };\r\n  \r\n  export function getTestsStarted () {\r\n    return {\r\n       type: GET_TESTS_STARTED\r\n    }\r\n  };\r\n  \r\n  export function getTestsFailure (error) {\r\n    return {\r\n      type: GET_TESTS_FAILURE,\r\n      payload: {\r\n        error\r\n      }\r\n    }\r\n  };\r\n\r\n  export function getUsersSuccess (users) {\r\n    return {\r\n      type: GET_USERS_SUCCESS,\r\n      payload: [\r\n        ...users\r\n      ]\r\n    }\r\n  };\r\n  \r\n  export function getUsersStarted () {\r\n    return {\r\n      type: GET_USERS_STARTED\r\n    }\r\n  };\r\n  \r\n  export function getUsersFailure (error) {\r\n    return {\r\n      type: GET_USERS_FAILURE,\r\n      payload: {\r\n        error\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  export function getCompaniesSuccess (companies) {\r\n    return {\r\n      type: GET_COMPANIES_SUCCESS,\r\n      payload: [\r\n        ...companies\r\n      ]\r\n    }\r\n  };\r\n  \r\n  export function getCompaniesStarted () {\r\n    return {\r\n      type: GET_COMPANIES_STARTED\r\n    }\r\n  };\r\n  \r\n  export function getCompaniesFailure (error) {\r\n    return {\r\n      type: GET_COMPANIES_FAILURE,\r\n      payload: {\r\n        error\r\n      }\r\n    }\r\n};\r\n\r\n\r\n\r\nexport function addUserTest (test) {\r\n  return {\r\n    type: ADD_USER_TEST,\r\n    test\r\n  }\r\n};\r\n\r\nexport function deleteUserTest () {\r\n  return {\r\n    type: DELETE_USER_TEST,\r\n  }\r\n};\r\n\r\nexport function addPassingTest (test) {\r\n  return {\r\n    type: ADD_PASSING_TEST,\r\n    test\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}