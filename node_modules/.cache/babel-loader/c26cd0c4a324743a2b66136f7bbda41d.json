{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { getCompaniesStarted, getCompaniesSuccess, getCompaniesFailure, getTestsStarted, getTestsFailure, getTestsSuccess, getUsersStarted, getUsersFailure, getUsersSuccess, editingTest } from '../actions/appAction';\nimport { firebase } from '../../firebase/firebase';\nexport var getTests = function getTests() {\n  return function (dispatch) {\n    dispatch(getTestsStarted());\n    firebase.database().ref('tests').on('value', function (snapshot) {\n      var tests = [];\n      var passers = [];\n      snapshot.forEach(function (childSnapshot) {\n        if (childSnapshot.hasChild('passers')) {\n          childSnapshot.child('passers').forEach(function (snapshot1) {\n            passers.push(_objectSpread({\n              id: snapshot1.key\n            }, snapshot1.val()));\n          });\n        } else {\n          passers = [];\n        }\n\n        if (childSnapshot.hasChild('passers')) {\n          tests.push(_objectSpread({\n            id: childSnapshot.key\n          }, childSnapshot.val(), {\n            passers: passers\n          }));\n        } else {\n          tests.push(_objectSpread({\n            id: childSnapshot.key\n          }, childSnapshot.val()));\n        }\n      });\n\n      function compareDates(stringDate) {\n        var today = Date.now();\n        return Date.parse(stringDate) >= today;\n      }\n\n      var filteredTest = [];\n      tests.sort(function (a, b) {\n        return a.testCreateDate - b.testCreateDate;\n      });\n      filteredTes = tests.filter(function (test) {\n        return !test.deleted && compareDates(test.testDeadline);\n      });\n      dispatch(getTestsSuccess(tests));\n    });\n  };\n};\nexport var getCompanies = function getCompanies() {\n  return function (dispatch) {\n    dispatch(getCompaniesStarted());\n    firebase.database().ref('companies').on('value', function (snapshot) {\n      var companies = [];\n      snapshot.forEach(function (childSnapshot) {\n        companies.push(_objectSpread({\n          id: childSnapshot.key\n        }, childSnapshot.val()));\n      });\n      dispatch(getCompaniesSuccess(companies));\n    });\n  };\n};\nexport var getUsers = function getUsers() {\n  return function (dispatch) {\n    dispatch(getUsersStarted());\n    firebase.database().ref('user').on('value', function (snapshot) {\n      var users = [];\n      var tests = [];\n      snapshot.forEach(function (childSnapshot) {\n        if (childSnapshot.hasChild('tests')) {\n          childSnapshot.child('tests').forEach(function (snapshot1) {\n            tests.push(_objectSpread({\n              id: snapshot1.key\n            }, snapshot1.val()));\n          });\n        } else {\n          tests = [];\n        }\n\n        if (childSnapshot.hasChild('tests')) {\n          users.push(_objectSpread({\n            id: childSnapshot.key\n          }, childSnapshot.val(), {\n            tests: tests\n          }));\n        } else {\n          users.push(_objectSpread({\n            id: childSnapshot.key\n          }, childSnapshot.val()));\n        }\n      });\n      dispatch(getUsersSuccess(users));\n    });\n  };\n};","map":{"version":3,"sources":["C:\\Users\\Gohar\\Desktop\\testing-project\\testing-project\\src\\store\\thunks\\thunks.js"],"names":["getCompaniesStarted","getCompaniesSuccess","getCompaniesFailure","getTestsStarted","getTestsFailure","getTestsSuccess","getUsersStarted","getUsersFailure","getUsersSuccess","editingTest","firebase","getTests","dispatch","database","ref","on","snapshot","tests","passers","forEach","childSnapshot","hasChild","child","snapshot1","push","id","key","val","compareDates","stringDate","today","Date","now","parse","filteredTest","sort","a","b","testCreateDate","filteredTes","filter","test","deleted","testDeadline","getCompanies","companies","getUsers","users"],"mappings":"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","sourcesContent":["import {\r\n    getCompaniesStarted,\r\n    getCompaniesSuccess,\r\n    getCompaniesFailure,\r\n    getTestsStarted,\r\n    getTestsFailure,\r\n    getTestsSuccess,\r\n    getUsersStarted,\r\n    getUsersFailure,\r\n    getUsersSuccess,\r\n    editingTest,\r\n} from '../actions/appAction';\r\nimport { firebase } from '../../firebase/firebase';\r\n\r\nexport const getTests = () => {\r\n    return dispatch => {\r\n        dispatch(getTestsStarted());\r\n\r\n        firebase.database().ref('tests').on('value', (snapshot) => {\r\n            let tests = [];\r\n            let passers = [];\r\n            snapshot.forEach(childSnapshot => {\r\n                if (childSnapshot.hasChild('passers')) {\r\n                    childSnapshot.child('passers').forEach(snapshot1 => {\r\n                        passers.push({\r\n                            id: snapshot1.key,\r\n                            ...snapshot1.val()\r\n                        })\r\n                    })\r\n                } else {\r\n                    passers = [];\r\n                }\r\n                if (childSnapshot.hasChild('passers')) {\r\n                    tests.push({\r\n                        id: childSnapshot.key,\r\n                        ...childSnapshot.val(),\r\n                        passers\r\n                    })\r\n                } else {\r\n                    tests.push({\r\n                        id: childSnapshot.key,\r\n                        ...childSnapshot.val(),\r\n                    })\r\n                }\r\n                \r\n            });\r\n            function compareDates(stringDate) {\r\n                let today = Date.now();\r\n                return Date.parse(stringDate) >= today;\r\n            }\r\n            let filteredTest = [];\r\n            tests.sort(function(a, b){return a.testCreateDate - b.testCreateDate});\r\n            filteredTes = tests.filter(test => !test.deleted && compareDates(test.testDeadline))\r\n           \r\n            \r\n            dispatch(getTestsSuccess(tests));\r\n        });\r\n    }\r\n};\r\n\r\nexport const getCompanies = () => {\r\n    return dispatch => {\r\n        dispatch(getCompaniesStarted());\r\n\r\n        firebase.database().ref('companies').on('value', (snapshot) => {\r\n            let companies = [];\r\n\r\n            snapshot.forEach(childSnapshot => {\r\n                companies.push({\r\n                    id: childSnapshot.key,\r\n                    ...childSnapshot.val()\r\n                })\r\n            });\r\n\r\n            dispatch(getCompaniesSuccess(companies));\r\n        });\r\n    }\r\n};\r\n\r\nexport const getUsers = () => {\r\n    return dispatch => {\r\n        dispatch(getUsersStarted());\r\n\r\n        firebase.database().ref('user').on('value', (snapshot) => {\r\n            let users = [];\r\n            let tests = [];\r\n            snapshot.forEach(childSnapshot => {\r\n                if (childSnapshot.hasChild('tests')) {\r\n                    childSnapshot.child('tests').forEach(snapshot1 => {\r\n                        tests.push({\r\n                            id: snapshot1.key,\r\n                            ...snapshot1.val()\r\n                        })\r\n                    })\r\n                } else {\r\n                    tests = [];\r\n                }\r\n                if (childSnapshot.hasChild('tests')) {\r\n                    users.push({\r\n                        id: childSnapshot.key,\r\n                        ...childSnapshot.val(),\r\n                        tests\r\n                    })\r\n                } else {\r\n                    users.push({\r\n                        id: childSnapshot.key,\r\n                        ...childSnapshot.val(),\r\n                        \r\n                    })\r\n                }\r\n\r\n            });\r\n            dispatch(getUsersSuccess(users));\r\n        });\r\n    }\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}