{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\src\\\\components\\\\TestPassPanel\\\\TestPassPanel.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\tmargin: auto;\\n\\tmax-width: 1200px;\\n\\tfont-size: 24px;\\n\\tcolor: white;\\n\\toverflow: none;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport TestFinished from './TestFinished';\nimport TestPasser from './TestPasser';\nimport { deleteTest as _deleteTest } from '../../store/actions/testPasser';\nimport { firebase } from '../../firebase/firebase';\nvar Main = styled.div(_templateObject());\n\nvar TestPassPanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TestPassPanel, _Component);\n\n  function TestPassPanel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TestPassPanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TestPassPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      testEnd: false,\n      test: _this.props.test,\n      user: _this.props.user,\n      time: _this.props.test.testDuration,\n      currentIndex: 0,\n      totalScore: 0\n    };\n\n    _this.testEnded = function () {\n      _this.setState({\n        testEnd: true\n      });\n    };\n\n    _this.totalScore = function (score) {\n      _this.setState({\n        totalScore: _this.state.totalScore + score\n      });\n    };\n\n    _this.updatePassingTest = function () {\n      console.log('unmounted');\n\n      var userTests = _this.props.user.tests.filter(function (test) {\n        return test.userScore >= 0;\n      });\n\n      if (_this.state.user) {\n        var userTest = firebase.database().ref(\"user/\".concat(_this.state.user.id, \"/tests/\").concat(_this.state.test.id));\n        userTest.update({\n          userScore: _this.props.userScore\n        });\n        var testRef = firebase.database().ref(\"tests/\".concat(_this.props.test.id));\n        testRef.child(\"passers\").child(\"\".concat(_this.props.user.id)).set(_objectSpread({}, _this.props.user, {\n          tests: userTests\n        }));\n      }\n    };\n\n    _this.getTime = function (time) {\n      _this.setState({\n        time: time\n      });\n    };\n\n    _this.getCurrentIndex = function (index) {\n      _this.setState({\n        currentIndex: index\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TestPassPanel, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      console.log(this.state.time);\n      console.log(this.state.currentIndex);\n      console.log(this.state.userScore);\n\n      if (this.props.test !== prevProps.test) {\n        this.setState({\n          test: this.props.test\n        });\n      }\n\n      if (this.props.user !== prevProps.user) {\n        this.setState({\n          user: this.props.user\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener('beforeunload', this.updatePassingTest);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.updatePassingTest();\n      window.removeEventListener('beforeunload', this.updatePassingTest);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Main, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, !this.state.testEnd && this.state.test && React.createElement(TestPasser, {\n        getCurrentIndex: this.getCurrentIndex,\n        getTime: this.getTime,\n        user: this.state.user,\n        totalScore: this.totalScore,\n        testEnded: this.testEnded,\n        test: this.props.test,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }), this.state.testEnd && React.createElement(TestFinished, {\n        user: this.props.user,\n        totalScore: this.state.totalScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return TestPassPanel;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    test: state.testPasser.testDetails,\n    userScore: state.testPasser.userScore\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    deleteTest: function deleteTest() {\n      return dispatch(_deleteTest());\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TestPassPanel);","map":{"version":3,"sources":["C:\\Users\\Gohar\\Desktop\\testing-project\\testing-project\\src\\components\\TestPassPanel\\TestPassPanel.js"],"names":["React","Component","styled","connect","TestFinished","TestPasser","deleteTest","firebase","Main","div","TestPassPanel","state","testEnd","test","props","user","time","testDuration","currentIndex","totalScore","testEnded","setState","score","updatePassingTest","console","log","userTests","tests","filter","userScore","userTest","database","ref","id","update","testRef","child","set","getTime","getCurrentIndex","index","prevProps","window","addEventListener","removeEventListener","mapStateToProps","testPasser","testDetails","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport styled from 'styled-components'\r\nimport { connect } from 'react-redux';\r\nimport TestFinished from './TestFinished';\r\nimport TestPasser from './TestPasser';\r\nimport {deleteTest} from '../../store/actions/testPasser';\r\nimport { firebase } from '../../firebase/firebase';\r\n\r\n\r\nconst Main = styled.div`\r\n\tmargin: auto;\r\n\tmax-width: 1200px;\r\n\tfont-size: 24px;\r\n\tcolor: white;\r\n\toverflow: none;\r\n`;\r\n\r\nclass TestPassPanel extends Component {\r\n\tstate = {\r\n\t\ttestEnd: false,\r\n\t\ttest: this.props.test,\r\n\t\tuser: this.props.user,\r\n\t\ttime: this.props.test.testDuration,\r\n\t\tcurrentIndex: 0,\r\n\t\ttotalScore: 0,\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps) {\t\r\n\t\tconsole.log(this.state.time);\r\n\t\tconsole.log(this.state.currentIndex);\r\n\t\tconsole.log(this.state.userScore);\r\n        if (this.props.test !== prevProps.test) {\r\n\t\t\tthis.setState({test: this.props.test});\r\n\t\t}\r\n\r\n\t\tif (this.props.user !== prevProps.user ) {\r\n            this.setState({ user: this.props.user });\r\n        }\r\n    }\r\n\r\n\ttestEnded = () => {\r\n\t\tthis.setState({testEnd: true});\r\n\t}\r\n\r\n\ttotalScore = (score) => {\r\n\t\tthis.setState({totalScore: this.state.totalScore + score});\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\twindow.addEventListener('beforeunload', this.updatePassingTest);\r\n\t}\r\n\tupdatePassingTest = () => {\r\n\t\tconsole.log('unmounted');\r\n\t\tlet userTests = this.props.user.tests.filter(test => test.userScore >= 0);\r\n\t\tif (this.state.user) {\r\n\t\t\tlet userTest =  firebase.database().ref(`user/${this.state.user.id}/tests/${this.state.test.id}`);\r\n\t\t\tuserTest.update({userScore: this.props.userScore});\r\n\t\t\tlet testRef = firebase.database().ref(`tests/${this.props.test.id}`);\r\n\t\t\ttestRef.child(`passers`).child(`${this.props.user.id}`).set({...this.props.user, tests: userTests});\r\n\t\t}\r\n\t}\r\n\tgetTime = (time) => {\r\n\t\tthis.setState({time: time});\r\n\t}\r\n\tgetCurrentIndex = (index) => {\r\n\t\tthis.setState({currentIndex: index});\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.updatePassingTest();\r\n\t\twindow.removeEventListener('beforeunload', this.updatePassingTest);\r\n\t\t\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Main>\r\n\t\t\t\t{\r\n\t\t\t\t\t!this.state.testEnd && this.state.test &&\r\n\t\t\t\t\t\t<TestPasser\r\n\t\t\t\t\t\t\tgetCurrentIndex={this.getCurrentIndex}\r\n\t\t\t\t\t\t\tgetTime={this.getTime}\r\n\t\t\t\t\t\t\tuser={this.state.user} \r\n\t\t\t\t\t\t\ttotalScore={this.totalScore}\r\n\t\t\t\t\t\t\ttestEnded={this.testEnded}\r\n\t\t\t\t\t\t\ttest={this.props.test}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.state.testEnd &&\r\n\t\t\t\t\t\t<TestFinished user={this.props.user}\r\n\t\t\t\t\t\t\ttotalScore={this.state.totalScore}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t}\r\n\t\t\t</Main>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\ttest: state.testPasser.testDetails,\r\n\t\tuserScore: state.testPasser.userScore,\r\n\t}\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n\treturn {\r\n\t\tdeleteTest: () => dispatch(deleteTest()),\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TestPassPanel)\r\n\r\n"]},"metadata":{},"sourceType":"module"}