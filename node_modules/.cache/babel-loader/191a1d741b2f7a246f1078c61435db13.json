{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\src\\\\components\\\\TestCreator\\\\TestEditor.js\";\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n\\tbackground-color: white;\\n\\tz-index:2;\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    border-bottom: 1px solid #D6D6D6;\\n    \\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    border-bottom: 1px solid #D6D6D6;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n\\tdisplay: flex;\\n\\tposition: relative;\\n\\tflex-direction: row;\\n\\tflex-wrap: wrap;\\n\\tmargin: 30px 0;\\n\\tjustify-content: space-between;\\n\\twidth: \", \";\\n\\tbox-sizing: border-box;\\n\\n\\t@media screen and (max-width: 1190px) {\\n\\t\\tflex-direction: column;\\n\\t\\tmin-width: 100%;\\n\\t}\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\tmargin: auto;\\n\\tmax-width: 1200px;\\n\\tfont-size: 24px;\\n\\toverflow: auto;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { addQuestion as _addQuestion, addQuestionSubmitted as _addQuestionSubmitted, submittedTrue as _submittedTrue, updateQuestions as _updateQuestions, questionNotValid as _questionNotValid, answerNotValid, deleteStateData as _deleteStateData, testCreatedFalse as _testCreatedFalse, addEditingQuestions as _addEditingQuestions, changeTotalScore as _changeTotalScore } from '../../store/actions/testCreator';\nimport { StickyContainer, Sticky } from 'react-sticky';\nimport { firebase } from '../../firebase/firebase';\nimport TestTitle from './TestComponents/TestTitle';\nimport TestCreatorCompany from './TestComponents/TestCreatorCompany';\nimport TestType from './TestComponents/TestType';\nimport TestDeadline from './TestComponents/TestDeadline';\nimport TestDuration from './TestComponents/TestDuration';\nimport TestDescription from './TestComponents/TestDescription';\nimport Button from './TestComponents/Button';\nimport QuestionEditor from './QuestionCreator/QuestionEditor';\nimport TestPassScore from './TestComponents/TestPassScore';\nimport TestTotalScore from './TestComponents/TestTotalScore';\nimport { Redirect } from \"react-router\";\nimport TestUpdateLink from './TestComponents/TestUpdatesLink';\nimport UpdateSuccessText from './TestComponents/TestUpdateSuccessText';\nvar Main = styled.div(_templateObject());\nvar FlexRow = styled.div(_templateObject2(), function (props) {\n  return props.width || '100%';\n});\nvar QuestionsDiv = styled.div(_templateObject3());\nvar TestHeader = styled.div(_templateObject4());\nvar Stickyheader = styled.div(_templateObject5());\n\nvar TestEditor =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TestEditor, _Component);\n\n  function TestEditor(props) {\n    var _this;\n\n    _classCallCheck(this, TestEditor);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TestEditor).call(this, props));\n\n    _this.getInputValue = function (e, field) {\n      var value = e.target.value;\n\n      if (e.target.type === 'number') {\n        if (value < 0) {\n          value = +value * -1;\n        } else if (value > 0) {\n          value = +value;\n        } else {\n          value = '';\n        }\n      }\n\n      _this.setState(_defineProperty({}, field, value));\n    };\n\n    _this.clearWordFromSpaces = function (word) {\n      return word.replace(/^[ ]+/g, '').replace(/\\s*$/, '');\n    };\n\n    _this.isFilled = function (inputValue) {\n      return !inputValue && _this.props.submitted ? true : false;\n    };\n\n    _this.addQuestion = function () {\n      _this.props.addQuestionSubmitted();\n\n      if (_this.testHeaderValidation()) {\n        _this.props.addQuestion();\n\n        _this.props.questionNotValid();\n\n        _this.props.ansnwerNotValid();\n\n        _this.props.testCreatedFalse();\n      }\n    };\n\n    _this.getQuestionValues = function (id, state) {\n      var questions = _this.props.questions.map(function (question) {\n        if (question.id === id) {\n          question.questionTitle = _this.clearWordFromSpaces(state.questionTitle);\n          question.isRight = +state.isRight;\n          question.score = state.score;\n          question.answers = state.answers;\n        }\n\n        return question;\n      });\n\n      _this.props.updateQuestions(questions);\n    };\n\n    _this.testHeaderValidation = function () {\n      var state = _this.state;\n      return state.testTitle && state.description && state.testDeadline && state.description && state.testDuration && state.testType;\n    };\n\n    _this.postData = function () {\n      var db = firebase.database();\n      var test = {\n        testTitle: _this.clearWordFromSpaces(_this.state.testTitle),\n        description: _this.clearWordFromSpaces(_this.state.description),\n        company: _this.props.user.name.toUpperCase(),\n        questions: _this.props.questions,\n        isEditing: false,\n        isPassing: false,\n        companyId: _this.props.user.id,\n        totalScore: _this.props.totalScore,\n        testDeadline: _this.state.testDeadline,\n        testType: _this.state.testType,\n        passScore: _this.state.passScore,\n        testDuration: _this.state.testDuration,\n        testCreateDate: Date.now(),\n        deleted: false\n      };\n      var updatedTest = db.ref(\"tests\").child(\"\".concat(_this.props.editingTest.id));\n      updatedTest.set(_objectSpread({}, test));\n    };\n\n    _this.submitHandler = function () {\n      _this.unmounted = false;\n      return new Promise(function (resolve, reject) {\n        _this.props.submittedTrue();\n\n        resolve(_this.props.submitted);\n      }).then(function () {\n        if (_this.testHeaderValidation() && _this.state.passScore && _this.state.passScore <= _this.props.totalScore && _this.props.isAnswerValid && _this.props.isQuestionValid) {\n          _this.postData();\n\n          _this.props.deleteStateData();\n\n          if (!_this.unmounted) {\n            return _this.setState({\n              testTitle: '',\n              description: '',\n              testDeadline: '',\n              testType: '',\n              passScore: '',\n              testDuration: ''\n            });\n          }\n        }\n      });\n    };\n\n    _this.state = {\n      editingTest: _this.props.editingTest,\n      testTitle: '',\n      description: '',\n      testDeadline: '',\n      testType: '',\n      passScore: '',\n      testDuration: ''\n    };\n    _this.unmounted = false;\n    return _this;\n  }\n\n  _createClass(TestEditor, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.editingTest !== null) {\n        this.setState({\n          editingTest: this.props.editingTest,\n          testTitle: this.props.editingTest.testTitle,\n          description: this.props.editingTest.description,\n          testDeadline: this.props.editingTest.testDeadline,\n          testType: this.props.editingTest.testType,\n          passScore: this.props.editingTest.passScore,\n          testDuration: this.props.editingTest.testDuration\n        });\n        this.props.addEditingQuestions(this.state.editingTest.questions);\n        this.props.changeTotalScore(this.state.editingTest.totalScore);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.deleteStateData();\n      this.props.testCreatedFalse();\n      this.unmounted = true;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return this.props.user && this.props.user.type === \"company\" ? React.createElement(Main, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, this.state.editingTest ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, React.createElement(TestUpdateLink, {\n        user: this.props.user,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }), React.createElement(StickyContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, !this.props.testCreated ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(TestHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(FlexRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(TestTitle, {\n        getInputValue: this.getInputValue,\n        value: this.state.testTitle,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }), React.createElement(TestCreatorCompany, {\n        value: this.props.user && this.props.user.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219\n        },\n        __self: this\n      }), React.createElement(TestType, {\n        getInputValue: this.getInputValue,\n        value: this.state.testType,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      })), React.createElement(FlexRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, React.createElement(TestDescription, {\n        getInputValue: this.getInputValue,\n        value: this.state.description,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      })), React.createElement(Sticky, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, function (_ref) {\n        var style = _ref.style;\n        return React.createElement(Stickyheader, {\n          style: style,\n          isSticky: true,\n          bottomOffset: 200,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          },\n          __self: this\n        }, React.createElement(FlexRow, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238\n          },\n          __self: this\n        }, React.createElement(TestDeadline, {\n          getInputValue: _this2.getInputValue,\n          value: _this2.state.testDeadline,\n          isFilled: _this2.isFilled,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 239\n          },\n          __self: this\n        }), React.createElement(TestDuration, {\n          getInputValue: _this2.getInputValue,\n          value: _this2.state.testDuration,\n          isFilled: _this2.isFilled,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244\n          },\n          __self: this\n        }), React.createElement(Button, {\n          onClick: _this2.addQuestion,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250\n          },\n          __self: this\n        }, \"ADD QUESTION\")));\n      })), this.props.questions.length > 0 && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, React.createElement(QuestionsDiv, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, this.props.questions.map(function (question, index) {\n        return React.createElement(QuestionEditor, {\n          key: question.id + index,\n          id: question.id,\n          question: question,\n          count: index + 1,\n          isFilled: _this2.isFilled,\n          clearWordFromSpaces: _this2.clearWordFromSpaces,\n          getQuestionValues: _this2.getQuestionValues,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260\n          },\n          __self: this\n        });\n      })), React.createElement(FlexRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }, React.createElement(TestTotalScore, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272\n        },\n        __self: this\n      }), React.createElement(TestPassScore, {\n        getInputValue: this.getInputValue,\n        value: this.state.passScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.submitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, \"UPDATE TEST\")))) : React.createElement(FlexRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, \" \", React.createElement(UpdateSuccessText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }), \" \"))) : \"Loader\") : React.createElement(Redirect, {\n        to: \"/authorization\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return TestEditor;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    totalScore: state.testCreator.totalScore,\n    submitted: state.testCreator.addQuestionSubmitted,\n    questions: state.testCreator.questions,\n    isAnswerValid: state.testCreator.isAnswerValid,\n    isQuestionValid: state.testCreator.isQuestionValid,\n    testCreated: state.testCreator.testCreated,\n    editingTest: state.testCreator.editingTest\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    changeTotalScore: function changeTotalScore(score) {\n      return dispatch(_changeTotalScore(score));\n    },\n    addQuestion: function addQuestion() {\n      return dispatch(_addQuestion());\n    },\n    addEditingQuestions: function addEditingQuestions(questions) {\n      return dispatch(_addEditingQuestions(questions));\n    },\n    addQuestionSubmitted: function addQuestionSubmitted() {\n      return dispatch(_addQuestionSubmitted());\n    },\n    submittedTrue: function submittedTrue() {\n      return dispatch(_submittedTrue());\n    },\n    updateQuestions: function updateQuestions(questions) {\n      return dispatch(_updateQuestions(questions));\n    },\n    questionNotValid: function questionNotValid() {\n      return dispatch(_questionNotValid());\n    },\n    ansnwerNotValid: function ansnwerNotValid() {\n      return dispatch(answerNotValid());\n    },\n    deleteStateData: function deleteStateData() {\n      return dispatch(_deleteStateData());\n    },\n    testCreatedFalse: function testCreatedFalse() {\n      return dispatch(_testCreatedFalse());\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TestEditor);","map":{"version":3,"sources":["C:\\Users\\Gohar\\Desktop\\testing-project\\testing-project\\src\\components\\TestCreator\\TestEditor.js"],"names":["React","Component","styled","connect","addQuestion","addQuestionSubmitted","submittedTrue","updateQuestions","questionNotValid","answerNotValid","deleteStateData","testCreatedFalse","addEditingQuestions","changeTotalScore","StickyContainer","Sticky","firebase","TestTitle","TestCreatorCompany","TestType","TestDeadline","TestDuration","TestDescription","Button","QuestionEditor","TestPassScore","TestTotalScore","Redirect","TestUpdateLink","UpdateSuccessText","Main","div","FlexRow","props","width","QuestionsDiv","TestHeader","Stickyheader","TestEditor","getInputValue","e","field","value","target","type","setState","clearWordFromSpaces","word","replace","isFilled","inputValue","submitted","testHeaderValidation","ansnwerNotValid","getQuestionValues","id","state","questions","map","question","questionTitle","isRight","score","answers","testTitle","description","testDeadline","testDuration","testType","postData","db","database","test","company","user","name","toUpperCase","isEditing","isPassing","companyId","totalScore","passScore","testCreateDate","Date","now","deleted","updatedTest","ref","child","editingTest","set","submitHandler","unmounted","Promise","resolve","reject","then","isAnswerValid","isQuestionValid","testCreated","style","length","index","mapStateToProps","testCreator","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport styled  from 'styled-components'\r\nimport { connect } from 'react-redux';\r\nimport { addQuestion, addQuestionSubmitted, submittedTrue, updateQuestions, questionNotValid, answerNotValid, deleteStateData, testCreatedFalse, addEditingQuestions, changeTotalScore } from '../../store/actions/testCreator';\r\nimport { StickyContainer, Sticky } from 'react-sticky';\r\nimport { firebase } from '../../firebase/firebase';\r\nimport TestTitle from './TestComponents/TestTitle';\r\nimport TestCreatorCompany from './TestComponents/TestCreatorCompany';\r\nimport TestType from './TestComponents/TestType';\r\nimport TestDeadline from './TestComponents/TestDeadline';\r\nimport TestDuration from './TestComponents/TestDuration';\r\nimport TestDescription from './TestComponents/TestDescription';\r\nimport Button from './TestComponents/Button';\r\nimport QuestionEditor from './QuestionCreator/QuestionEditor';\r\nimport TestPassScore from './TestComponents/TestPassScore';\r\nimport TestTotalScore from './TestComponents/TestTotalScore';\r\nimport {Redirect} from \"react-router\";\r\nimport TestUpdateLink from './TestComponents/TestUpdatesLink';\r\nimport UpdateSuccessText from './TestComponents/TestUpdateSuccessText';\r\n\r\n\r\n\r\nconst Main = styled.div`\r\n\tmargin: auto;\r\n\tmax-width: 1200px;\r\n\tfont-size: 24px;\r\n\toverflow: auto;\r\n`;\r\n\r\nconst FlexRow = styled.div`\r\n\tdisplay: flex;\r\n\tposition: relative;\r\n\tflex-direction: row;\r\n\tflex-wrap: wrap;\r\n\tmargin: 30px 0;\r\n\tjustify-content: space-between;\r\n\twidth: ${props => props.width || '100%'};\r\n\tbox-sizing: border-box;\r\n\r\n\t@media screen and (max-width: 1190px) {\r\n\t\tflex-direction: column;\r\n\t\tmin-width: 100%;\r\n\t}\r\n`;\r\n\r\nconst QuestionsDiv = styled.div`\r\n    border-bottom: 1px solid #D6D6D6;\r\n`;\r\n\r\nconst TestHeader = styled.div`\r\n    border-bottom: 1px solid #D6D6D6;\r\n    \r\n`;\r\nconst Stickyheader = styled.div`\r\n\tbackground-color: white;\r\n\tz-index:2;\r\n`;\r\n\r\nclass TestEditor extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n            editingTest: this.props.editingTest,\r\n           \ttestTitle: '',\r\n\t\t\tdescription: '',\r\n\t\t\ttestDeadline: '',\r\n            testType: '',\r\n            passScore: '',\r\n\t\t\ttestDuration: '',\r\n        }\r\n        this.unmounted = false;\r\n    }\r\n\r\n    getInputValue = (e, field) => {\r\n        let value = e.target.value;\r\n        if (e.target.type === 'number') {\r\n            if (value < 0) {\r\n                value = +value * (-1);\r\n            } else if (value > 0) {\r\n                value = +value;\r\n            } else {\r\n                value = '';\r\n            }\r\n        }\r\n        this.setState({ [field]: value });\r\n    }\r\n\r\n    clearWordFromSpaces = (word) => {\r\n\t\treturn word.replace(/^[ ]+/g, '').replace(/\\s*$/, '');\r\n    }\r\n\r\n    isFilled = (inputValue) => {\r\n        return !inputValue && this.props.submitted ? true : false;\r\n    }\r\n    \r\n    addQuestion = () => {\r\n\t\tthis.props.addQuestionSubmitted();\r\n\t    if (this.testHeaderValidation()) {\r\n           this.props.addQuestion();\r\n           this.props.questionNotValid();\r\n\t\t   this.props.ansnwerNotValid();\r\n\t\t   this.props.testCreatedFalse();\r\n        }\r\n    }\r\n\r\n    getQuestionValues = (id, state) => {\r\n\t\tlet questions = this.props.questions.map(question => {\r\n\t\t\tif (question.id === id) {\r\n\t\t\t\tquestion.questionTitle = this.clearWordFromSpaces(state.questionTitle);\r\n\t\t\t\tquestion.isRight = +state.isRight; \r\n\t\t\t\tquestion.score = state.score;\r\n\t\t\t\tquestion.answers = state.answers;\r\n\t\t\t}\r\n\t\t\treturn question;\r\n\t\t})\r\n\t\tthis.props.updateQuestions(questions);\r\n\t}\r\n\r\n\ttestHeaderValidation = () => {\r\n\t\tlet state = this.state;\r\n\t\treturn state.testTitle \r\n\t\t\t&& state.description\r\n\t\t\t&& state.testDeadline \r\n\t\t\t&& state.description \r\n\t\t\t&& state.testDuration \r\n\t\t\t&& state.testType \r\n\t\t}\r\n\t\r\n    \r\n    postData = () => {\r\n\t\tlet db = firebase.database();\r\n\t\tlet test = {\r\n\t\t\t\ttestTitle: this.clearWordFromSpaces(this.state.testTitle),\r\n\t\t\t\tdescription: this.clearWordFromSpaces(this.state.description),\r\n\t\t\t\tcompany: this.props.user.name.toUpperCase(),\r\n\t\t\t\tquestions: this.props.questions,\r\n                isEditing: false,\r\n                isPassing: false,\r\n                companyId: this.props.user.id,\r\n                totalScore: this.props.totalScore,\r\n                testDeadline: this.state.testDeadline,\r\n                testType: this.state.testType,\r\n                passScore: this.state.passScore,\r\n                testDuration: this.state.testDuration,\r\n                testCreateDate: Date.now(),\r\n                deleted: false,\r\n\t\t};\r\n\t\tlet updatedTest = db.ref(`tests`).child(`${this.props.editingTest.id}`);\r\n        updatedTest.set({ ...test });\r\n\t}\r\n\r\n    submitHandler = () => {\r\n        this.unmounted = false;\r\n\t\treturn new Promise ((resolve, reject) => {\r\n\t\t\tthis.props.submittedTrue();\r\n\t\t\tresolve(this.props.submitted)\r\n\t\t}).then (() => {\r\n\t\t\tif (this.testHeaderValidation()\r\n\t\t\t\t&& this.state.passScore\r\n\t\t\t\t&& (this.state.passScore <= this.props.totalScore)\r\n\t\t\t\t&& this.props.isAnswerValid \r\n\t\t\t\t&& this.props.isQuestionValid)  {\r\n\r\n\t\t\t\tthis.postData();\r\n\t\t\t\tthis.props.deleteStateData();\r\n                if (!this.unmounted) {\r\n                    return this.setState({\r\n                            testTitle: '',\r\n                            description: '',\r\n                            testDeadline: '',\r\n                            testType: '',\r\n                            passScore: '',\r\n                            testDuration: '',\r\n                            \r\n                        })\r\n                }\r\n            }\r\n\t\t})\r\n    }\r\n    componentDidMount() {\r\n        if (this.props.editingTest !== null) {\r\n            this.setState({ \r\n                editingTest: this.props.editingTest,\r\n                testTitle: this.props.editingTest.testTitle,\r\n                description: this.props.editingTest.description,\r\n                testDeadline: this.props.editingTest.testDeadline,\r\n                testType: this.props.editingTest.testType,\r\n                passScore: this.props.editingTest.passScore,\r\n                testDuration: this.props.editingTest.testDuration,\r\n        })\r\n        this.props.addEditingQuestions(this.state.editingTest.questions);\r\n        this.props.changeTotalScore(this.state.editingTest.totalScore)\r\n        }\r\n    }\r\n\r\n    componentWillUnmount () {\r\n        this.props.deleteStateData();\r\n        this.props.testCreatedFalse();\r\n        this.unmounted = true;\r\n    }\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t(this.props.user && this.props.user.type === \"company\" ) ?\r\n\t\t\t  <Main>\r\n                {this.state.editingTest ? \r\n                <div>\r\n                    <TestUpdateLink user={this.props.user} />\r\n                    <StickyContainer>\r\n                        {!this.props.testCreated ?\r\n                        <div>\r\n                            <TestHeader>\r\n                                <FlexRow>\r\n                                    <TestTitle\r\n                                        getInputValue={this.getInputValue}\r\n                                        value={this.state.testTitle}\r\n                                        isFilled={this.isFilled}\r\n                                    />\r\n                                    <TestCreatorCompany \r\n                                        value={this.props.user && this.props.user.name}\r\n                                    />\r\n                                    <TestType \r\n                                        getInputValue={this.getInputValue}\r\n                                        value={this.state.testType}\r\n                                        isFilled={this.isFilled} \r\n                                    />\r\n                                </FlexRow>\r\n                                <FlexRow>\r\n                                    <TestDescription \r\n                                        getInputValue={this.getInputValue}\r\n                                        value={this.state.description}\r\n                                        isFilled={this.isFilled}\r\n                                    />\r\n                                </FlexRow>\r\n                                <Sticky>\r\n                                    {({\tstyle, }) => (\r\n                                    <Stickyheader style={style} isSticky={true} bottomOffset={200}>\r\n                                    <FlexRow >\t\r\n                                        <TestDeadline \r\n                                            getInputValue={this.getInputValue}\r\n                                            value={this.state.testDeadline}\r\n                                            isFilled={this.isFilled} \r\n                                        />\r\n                                        <TestDuration\r\n                                            getInputValue={this.getInputValue}\r\n                                            value={this.state.testDuration}\r\n                                            isFilled={this.isFilled}  \r\n                                        />\r\n                                    \r\n                                        <Button onClick={this.addQuestion} >ADD QUESTION</Button>\r\n                                    </FlexRow>\r\n                                    </Stickyheader>\r\n                                )}\r\n                                </Sticky>\r\n                                </TestHeader>\r\n                                {this.props.questions.length > 0 && \r\n                                    <div>\r\n                                        <QuestionsDiv>\r\n                                            {this.props.questions.map((question, index) =>\r\n                                                <QuestionEditor\r\n                                                    key={question.id + index}\r\n                                                    id={question.id}\r\n                                                    question={question}\r\n                                                    count={index + 1}\r\n                                                    isFilled={this.isFilled}\r\n                                                    clearWordFromSpaces={this.clearWordFromSpaces}\r\n                                                    getQuestionValues={this.getQuestionValues}  \r\n                                                />\r\n                                            )}\r\n                                        </QuestionsDiv>\r\n                                        <FlexRow>\r\n                                            <TestTotalScore />\r\n                                            <TestPassScore\r\n                                                getInputValue={this.getInputValue}\r\n                                                value={this.state.passScore}\r\n                                            />\r\n                                            <Button onClick={this.submitHandler}>\r\n                                                UPDATE TEST\r\n                                            </Button>\r\n                                        </FlexRow>\r\n                                    </div>\r\n                                }\r\n                        </div> \r\n                        :  <FlexRow> <UpdateSuccessText /> </FlexRow> \r\n                        }\r\n                    </StickyContainer>\r\n                </div> \r\n                : \"Loader\" \r\n               }\r\n\t\t\t</Main>\r\n\t\t\t: <Redirect to='/authorization'/>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n        totalScore: state.testCreator.totalScore,\r\n        submitted: state.testCreator.addQuestionSubmitted,\r\n\t\tquestions: state.testCreator.questions,\r\n\t\tisAnswerValid: state.testCreator.isAnswerValid,\r\n\t\tisQuestionValid: state.testCreator.isQuestionValid,\r\n\t\ttestCreated: state.testCreator.testCreated,\r\n\t\teditingTest: state.testCreator.editingTest,\r\n\t}\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n\treturn {\r\n        changeTotalScore: (score) => dispatch(changeTotalScore(score)),\r\n        addQuestion: () => dispatch(addQuestion()),\r\n        addEditingQuestions: (questions) => dispatch(addEditingQuestions(questions)),\r\n        addQuestionSubmitted: () => dispatch(addQuestionSubmitted()),\r\n        submittedTrue : () => dispatch(submittedTrue()),\r\n        updateQuestions: (questions) => dispatch(updateQuestions(questions)),\r\n        questionNotValid: () => dispatch(questionNotValid()),\r\n        ansnwerNotValid: () => dispatch(answerNotValid()),\r\n\t\tdeleteStateData: () => dispatch(deleteStateData()),\r\n\t\ttestCreatedFalse: () => dispatch(testCreatedFalse()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TestEditor)\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}