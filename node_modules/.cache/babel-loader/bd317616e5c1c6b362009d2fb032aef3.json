{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430 (2)\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\\\u041D\\u043E\\u0432\\u0430\\u044F \\u043F\\u0430\\u043F\\u043A\\u0430 (2)\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { getCompaniesStarted, getCompaniesSuccess, getTestsStarted, getTestsSuccess, getUsersStarted, getUsersSuccess } from '../actions/appAction';\nimport { firebase } from '../../firebase/firebase';\nimport { addTest, getTestSuccess } from '../actions/testPasser';\nexport var getTests = function getTests() {\n  return function (dispatch) {\n    dispatch(getTestsStarted());\n    firebase.database().ref('tests').on('value', function (snapshot) {\n      var tests = [];\n      var passers = [];\n      snapshot.forEach(function (childSnapshot) {\n        if (childSnapshot.hasChild('passers')) {\n          var passersObj = {};\n          childSnapshot.child('passers').forEach(function (snapshot1) {\n            passersObj = _objectSpread({}, passersObj, _defineProperty({}, snapshot1.key, _objectSpread({\n              id: snapshot1.key\n            }, snapshot1.val())));\n            passers = Object.values(passersObj);\n          });\n        } else {\n          passers = [];\n        }\n\n        if (childSnapshot.hasChild('passers')) {\n          tests.push(_objectSpread({\n            id: childSnapshot.key\n          }, childSnapshot.val(), {\n            passers: passers\n          }));\n        } else {\n          tests.push(_objectSpread({\n            id: childSnapshot.key\n          }, childSnapshot.val()));\n        }\n      });\n      var filteredTests = [];\n      tests.sort(function (a, b) {\n        return b.testCreateDate - a.testCreateDate;\n      });\n      filteredTests = tests.filter(function (test) {\n        return !test.deleted;\n      });\n      dispatch(getTestsSuccess(filteredTests));\n    });\n  };\n};\nexport var getCompanies = function getCompanies() {\n  return function (dispatch) {\n    dispatch(getCompaniesStarted());\n    firebase.database().ref('companies').on('value', function (snapshot) {\n      var companies = [];\n      snapshot.forEach(function (childSnapshot) {\n        companies.push(_objectSpread({\n          id: childSnapshot.key\n        }, childSnapshot.val()));\n      });\n      dispatch(getCompaniesSuccess(companies));\n    });\n  };\n};\nexport var getUsers = function getUsers() {\n  return function (dispatch) {\n    dispatch(getUsersStarted());\n    firebase.database().ref('user').on('value', function (snapshot) {\n      var users = [];\n      var tests = [];\n      snapshot.forEach(function (childSnapshot) {\n        if (childSnapshot.hasChild('tests')) {\n          var testsObj = {};\n          childSnapshot.child('tests').forEach(function (snapshot1) {\n            testsObj = _objectSpread({}, testsObj, _defineProperty({}, snapshot1.key, _objectSpread({\n              id: snapshot1.key\n            }, snapshot1.val())));\n            tests = Object.values(testsObj);\n          });\n        } else {\n          tests = [];\n        }\n\n        if (childSnapshot.hasChild('tests')) {\n          users.push(_objectSpread({\n            id: childSnapshot.key\n          }, childSnapshot.val(), {\n            tests: tests\n          }));\n        } else {\n          users.push(_objectSpread({\n            id: childSnapshot.key\n          }, childSnapshot.val()));\n        }\n      });\n      dispatch(getUsersSuccess(users));\n    });\n  };\n};\nexport var getPassingTest = function getPassingTest(test) {\n  return function (dispatch) {\n    new Promise(function (resolve) {\n      dispatch(addTest(test));\n      resolve(test);\n    }).then(function (test) {\n      dispatch(getTestSuccess());\n    });\n  };\n};","map":{"version":3,"sources":["C:\\Users\\Gohar\\Desktop\\Новая папка (2)\\src\\store\\thunks\\thunks.js"],"names":["getCompaniesStarted","getCompaniesSuccess","getTestsStarted","getTestsSuccess","getUsersStarted","getUsersSuccess","firebase","addTest","getTestSuccess","getTests","dispatch","database","ref","on","snapshot","tests","passers","forEach","childSnapshot","hasChild","passersObj","child","snapshot1","key","id","val","Object","values","push","filteredTests","sort","a","b","testCreateDate","filter","test","deleted","getCompanies","companies","getUsers","users","testsObj","getPassingTest","Promise","resolve","then"],"mappings":"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","sourcesContent":["import {\r\n    getCompaniesStarted,\r\n    getCompaniesSuccess,\r\n    getTestsStarted,\r\n    getTestsSuccess,\r\n    getUsersStarted,\r\n    getUsersSuccess,\r\n\r\n} from '../actions/appAction';\r\nimport { firebase } from '../../firebase/firebase';\r\nimport { addTest, getTestSuccess } from '../actions/testPasser';\r\n\r\nexport const getTests = () => {\r\n    return dispatch => {\r\n        dispatch(getTestsStarted());\r\n\r\n        firebase.database().ref('tests').on('value', (snapshot) => {\r\n            let tests = [];\r\n            let passers = [];\r\n            snapshot.forEach(childSnapshot => {\r\n                if (childSnapshot.hasChild('passers')) {\r\n                   let passersObj = {};\r\n                    childSnapshot.child('passers').forEach(snapshot1 => {\r\n                        \r\n                        passersObj = {\r\n                            ...passersObj,\r\n                            [snapshot1.key]: { id: snapshot1.key, ...snapshot1.val() }\r\n                            \r\n                        }\r\n                        passers = Object.values(passersObj);\r\n                    })\r\n                } else {\r\n                    passers = [];\r\n                }\r\n                if (childSnapshot.hasChild('passers')) {\r\n                    tests.push({\r\n                        id: childSnapshot.key,\r\n                        ...childSnapshot.val(),\r\n                        passers\r\n                    })\r\n                } else {\r\n                    tests.push({\r\n                        id: childSnapshot.key,\r\n                        ...childSnapshot.val(),\r\n                    })\r\n                }\r\n\r\n            });\r\n            let filteredTests = [];\r\n            tests.sort(function (a, b) { return b.testCreateDate - a.testCreateDate });\r\n            filteredTests = tests.filter(test => !test.deleted)\r\n\r\n\r\n            dispatch(getTestsSuccess(filteredTests));\r\n        });\r\n    }\r\n};\r\n\r\nexport const getCompanies = () => {\r\n    return dispatch => {\r\n        dispatch(getCompaniesStarted());\r\n\r\n        firebase.database().ref('companies').on('value', (snapshot) => {\r\n            let companies = [];\r\n\r\n            snapshot.forEach(childSnapshot => {\r\n                companies.push({\r\n                    id: childSnapshot.key,\r\n                    ...childSnapshot.val()\r\n                })\r\n            });\r\n\r\n            dispatch(getCompaniesSuccess(companies));\r\n        });\r\n    }\r\n};\r\n\r\nexport const getUsers = () => {\r\n    return dispatch => {\r\n        dispatch(getUsersStarted());\r\n\r\n        firebase.database().ref('user').on('value', (snapshot) => {\r\n            let users = [];\r\n            let tests = [];\r\n            snapshot.forEach(childSnapshot => {\r\n                if (childSnapshot.hasChild('tests')) {\r\n                    let testsObj = {};\r\n                    childSnapshot.child('tests').forEach(snapshot1 => {\r\n                       \r\n                        testsObj = {\r\n                            ...testsObj,\r\n                            [snapshot1.key]: { id: snapshot1.key, ...snapshot1.val() }\r\n                            \r\n                        }\r\n                        tests = Object.values(testsObj);\r\n                    })\r\n                } else {\r\n                    tests = [];\r\n                }\r\n                if (childSnapshot.hasChild('tests')) {\r\n                    users.push({\r\n                        id: childSnapshot.key,\r\n                        ...childSnapshot.val(),\r\n                        tests\r\n                    })\r\n                } else {\r\n                    users.push({\r\n                        id: childSnapshot.key,\r\n                        ...childSnapshot.val(),\r\n                    })\r\n                }\r\n\r\n            });\r\n            dispatch(getUsersSuccess(users));\r\n        });\r\n    }\r\n};\r\n\r\nexport const getPassingTest = (test) => {\r\n    return dispatch => {\r\n        new Promise(resolve => {\r\n            dispatch(addTest(test));\r\n            resolve(test);\r\n        }).then(test => {\r\n            dispatch(getTestSuccess());\r\n        })\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}