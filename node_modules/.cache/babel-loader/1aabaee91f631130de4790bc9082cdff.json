{"ast":null,"code":"/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport ControllerInterface from './controller-interface';\nimport Errors from '../models/errors';\nimport WorkerPageMessage from '../models/worker-page-message';\nimport DefaultSW from '../models/default-sw';\nimport NOTIFICATION_PERMISSION from '../models/notification-permission';\nimport { createSubscribe } from '@firebase/util';\n\nvar WindowController =\n/** @class */\nfunction (_super) {\n  __extends(WindowController, _super);\n  /**\n   * A service that provides a MessagingService instance.\n   * @param {!firebase.app.App} app\n   */\n\n\n  function WindowController(app) {\n    var _this = _super.call(this, app) || this;\n    /**\n     * @private\n     * @type {ServiceWorkerRegistration}\n     */\n\n\n    _this.registrationToUse_;\n    /**\n     * @private\n     * @type {Promise}\n     */\n\n    _this.manifestCheckPromise_;\n    /**\n     * @private\n     * @type {firebase.Observer}\n     */\n\n    _this.messageObserver_ = null;\n    /**\n     * @private {!firebase.Subscribe} The subscribe function to the onMessage\n     * observer.\n     */\n\n    _this.onMessage_ = createSubscribe(function (observer) {\n      _this.messageObserver_ = observer;\n    });\n    /**\n     * @private\n     * @type {firebase.Observer}\n     */\n\n    _this.tokenRefreshObserver_ = null;\n    _this.onTokenRefresh_ = createSubscribe(function (observer) {\n      _this.tokenRefreshObserver_ = observer;\n    });\n\n    _this.setupSWMessageListener_();\n\n    return _this;\n  }\n  /**\n   * This method returns an FCM token if it can be generated.\n   * The return promise will reject if the browser doesn't support\n   * FCM, if permission is denied for notifications or it's not\n   * possible to generate a token.\n   * @export\n   * @return {Promise<string> | Promise<null>} Returns a promise the\n   * resolves to an FCM token or null if permission isn't granted.\n   */\n\n\n  WindowController.prototype.getToken = function () {\n    var _this = this; // Check that the required API's are available\n\n\n    if (!this.isSupported_()) {\n      return Promise.reject(this.errorFactory_.create(Errors.codes.UNSUPPORTED_BROWSER));\n    }\n\n    return this.manifestCheck_().then(function () {\n      return _super.prototype.getToken.call(_this);\n    });\n  };\n  /**\n   * The method checks that a manifest is defined and has the correct GCM\n   * sender ID.\n   * @private\n   * @return {Promise} Returns a promise that resolves if the manifest matches\n   * our required sender ID\n   */\n\n\n  WindowController.prototype.manifestCheck_ = function () {\n    var _this = this;\n\n    if (this.manifestCheckPromise_) {\n      return this.manifestCheckPromise_;\n    }\n\n    var manifestTag = document.querySelector('link[rel=\"manifest\"]');\n\n    if (!manifestTag) {\n      this.manifestCheckPromise_ = Promise.resolve();\n    } else {\n      this.manifestCheckPromise_ = fetch(manifestTag.href).then(function (response) {\n        return response.json();\n      }).catch(function () {\n        // If the download or parsing fails allow check.\n        // We only want to error if we KNOW that the gcm_sender_id is incorrect.\n        return Promise.resolve();\n      }).then(function (manifestContent) {\n        if (!manifestContent) {\n          return;\n        }\n\n        if (!manifestContent['gcm_sender_id']) {\n          return;\n        }\n\n        if (manifestContent['gcm_sender_id'] !== '103953800507') {\n          throw _this.errorFactory_.create(Errors.codes.INCORRECT_GCM_SENDER_ID);\n        }\n      });\n    }\n\n    return this.manifestCheckPromise_;\n  };\n  /**\n   * Request permission if it is not currently granted\n   * @export\n   * @returns {Promise} Resolves if the permission was granted, otherwise\n   * rejects\n   */\n\n\n  WindowController.prototype.requestPermission = function () {\n    var _this = this;\n\n    if (Notification.permission === NOTIFICATION_PERMISSION.granted) {\n      return Promise.resolve();\n    }\n\n    return new Promise(function (resolve, reject) {\n      var managePermissionResult = function managePermissionResult(result) {\n        if (result === NOTIFICATION_PERMISSION.granted) {\n          return resolve();\n        } else if (result === NOTIFICATION_PERMISSION.denied) {\n          return reject(_this.errorFactory_.create(Errors.codes.PERMISSION_BLOCKED));\n        } else {\n          return reject(_this.errorFactory_.create(Errors.codes.PERMISSION_DEFAULT));\n        }\n      }; // The Notification.requestPermission API was changed to\n      // return a promise so now have to handle both in case\n      // browsers stop support callbacks for promised version\n\n\n      var permissionPromise = Notification.requestPermission(function (result) {\n        if (permissionPromise) {\n          // Let the promise manage this\n          return;\n        }\n\n        managePermissionResult(result);\n      });\n\n      if (permissionPromise) {\n        // Prefer the promise version as it's the future API.\n        permissionPromise.then(managePermissionResult);\n      }\n    });\n  };\n  /**\n   * This method allows a developer to override the default service worker and\n   * instead use a custom service worker.\n   * @export\n   * @param {!ServiceWorkerRegistration} registration The service worker\n   * registration that should be used to receive the push messages.\n   */\n\n\n  WindowController.prototype.useServiceWorker = function (registration) {\n    if (!(registration instanceof ServiceWorkerRegistration)) {\n      throw this.errorFactory_.create(Errors.codes.SW_REGISTRATION_EXPECTED);\n    }\n\n    if (typeof this.registrationToUse_ !== 'undefined') {\n      throw this.errorFactory_.create(Errors.codes.USE_SW_BEFORE_GET_TOKEN);\n    }\n\n    this.registrationToUse_ = registration;\n  };\n  /**\n   * @export\n   * @param {!firebase.Observer|function(*)} nextOrObserver An observer object\n   * or a function triggered on message.\n   * @param {function(!Error)=} optError Optional A function triggered on\n   * message error.\n   * @param {function()=} optCompleted Optional function triggered when the\n   * observer is removed.\n   * @return {!function()} The unsubscribe function for the observer.\n   */\n\n\n  WindowController.prototype.onMessage = function (nextOrObserver, optError, optCompleted) {\n    return this.onMessage_(nextOrObserver, optError, optCompleted);\n  };\n  /**\n   * @export\n   * @param {!firebase.Observer|function()} nextOrObserver An observer object\n   * or a function triggered on token refresh.\n   * @param {function(!Error)=} optError Optional A function\n   * triggered on token refresh error.\n   * @param {function()=} optCompleted Optional function triggered when the\n   * observer is removed.\n   * @return {!function()} The unsubscribe function for the observer.\n   */\n\n\n  WindowController.prototype.onTokenRefresh = function (nextOrObserver, optError, optCompleted) {\n    return this.onTokenRefresh_(nextOrObserver, optError, optCompleted);\n  };\n  /**\n   * Given a registration, wait for the service worker it relates to\n   * become activer\n   * @private\n   * @param  {ServiceWorkerRegistration} registration Registration to wait\n   * for service worker to become active\n   * @return {Promise<!ServiceWorkerRegistration>} Wait for service worker\n   * registration to become active\n   */\n\n\n  WindowController.prototype.waitForRegistrationToActivate_ = function (registration) {\n    var _this = this;\n\n    var serviceWorker = registration.installing || registration.waiting || registration.active;\n    return new Promise(function (resolve, reject) {\n      if (!serviceWorker) {\n        // This is a rare scenario but has occured in firefox\n        reject(_this.errorFactory_.create(Errors.codes.NO_SW_IN_REG));\n        return;\n      } // Because the Promise function is called on next tick there is a\n      // small chance that the worker became active or redundant already.\n\n\n      if (serviceWorker.state === 'activated') {\n        resolve(registration);\n        return;\n      }\n\n      if (serviceWorker.state === 'redundant') {\n        reject(_this.errorFactory_.create(Errors.codes.SW_REG_REDUNDANT));\n        return;\n      }\n\n      var stateChangeListener = function stateChangeListener() {\n        if (serviceWorker.state === 'activated') {\n          resolve(registration);\n        } else if (serviceWorker.state === 'redundant') {\n          reject(_this.errorFactory_.create(Errors.codes.SW_REG_REDUNDANT));\n        } else {\n          // Return early and wait to next state change\n          return;\n        }\n\n        serviceWorker.removeEventListener('statechange', stateChangeListener);\n      };\n\n      serviceWorker.addEventListener('statechange', stateChangeListener);\n    });\n  };\n  /**\n   * This will regiater the default service worker and return the registration\n   * @private\n   * @return {Promise<!ServiceWorkerRegistration>} The service worker\n   * registration to be used for the push service.\n   */\n\n\n  WindowController.prototype.getSWRegistration_ = function () {\n    var _this = this;\n\n    if (this.registrationToUse_) {\n      return this.waitForRegistrationToActivate_(this.registrationToUse_);\n    } // Make the registration null so we know useServiceWorker will not\n    // use a new service worker as registrationToUse_ is no longer undefined\n\n\n    this.registrationToUse_ = null;\n    return navigator.serviceWorker.register(DefaultSW.path, {\n      scope: DefaultSW.scope\n    }).catch(function (err) {\n      throw _this.errorFactory_.create(Errors.codes.FAILED_DEFAULT_REGISTRATION, {\n        browserErrorMessage: err.message\n      });\n    }).then(function (registration) {\n      return _this.waitForRegistrationToActivate_(registration).then(function () {\n        _this.registrationToUse_ = registration; // We update after activation due to an issue with Firefox v49 where\n        // a race condition occassionally causes the service work to not\n        // install\n\n        registration.update();\n        return registration;\n      });\n    });\n  };\n  /**\n   * This method will set up a message listener to handle\n   * events from the service worker that should trigger\n   * events in the page.\n   *\n   * @private\n   */\n\n\n  WindowController.prototype.setupSWMessageListener_ = function () {\n    var _this = this;\n\n    if (!('serviceWorker' in navigator)) {\n      return;\n    }\n\n    navigator.serviceWorker.addEventListener('message', function (event) {\n      if (!event.data || !event.data[WorkerPageMessage.PARAMS.TYPE_OF_MSG]) {\n        // Not a message from FCM\n        return;\n      }\n\n      var workerPageMessage = event.data;\n\n      switch (workerPageMessage[WorkerPageMessage.PARAMS.TYPE_OF_MSG]) {\n        case WorkerPageMessage.TYPES_OF_MSG.PUSH_MSG_RECEIVED:\n        case WorkerPageMessage.TYPES_OF_MSG.NOTIFICATION_CLICKED:\n          var pushMessage = workerPageMessage[WorkerPageMessage.PARAMS.DATA];\n\n          _this.messageObserver_.next(pushMessage);\n\n          break;\n\n        default:\n          // Noop.\n          break;\n      }\n    }, false);\n  };\n  /**\n   * Checks to see if the required API's are valid or not.\n   * @private\n   * @return {boolean} Returns true if the desired APIs are available.\n   */\n\n\n  WindowController.prototype.isSupported_ = function () {\n    return 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'fetch' in window && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n  };\n\n  return WindowController;\n}(ControllerInterface);\n\nexport default WindowController;","map":null,"metadata":{},"sourceType":"module"}