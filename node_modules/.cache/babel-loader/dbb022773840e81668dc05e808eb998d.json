{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\src\\\\components\\\\TestCreator\\\\TestCreator.js\";\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n\\tbackground-color: white;\\n\\tposition: relative;\\n\\tz-index:2;\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n    border-bottom: 1px solid #D6D6D6;\\n    \\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    border-bottom: 1px solid #D6D6D6;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n\\tdisplay: flex;\\n\\tposition: relative;\\n\\tflex-direction: row;\\n\\tflex-wrap: wrap;\\n\\tmargin: 35px 0;\\n\\tjustify-content: space-between;\\n\\twidth: \", \";\\n\\tbox-sizing: border-box;\\n\\n\\t@media screen and (max-width: 1190px) {\\n\\t\\tflex-direction: column;\\n\\t\\tmin-width: 100%;\\n\\t}\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\tmargin: auto;\\n\\tmax-width: 1200px;\\n\\tfont-size: 24px;\\n\\toverflow: auto;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { addQuestion as _addQuestion, addQuestionSubmitted as _addQuestionSubmitted, submittedTrue as _submittedTrue, submittedFalse as _submittedFalse, updateQuestions as _updateQuestions, questionNotValid as _questionNotValid, answerNotValid, deleteStateData as _deleteStateData, testCreatedFalse as _testCreatedFalse } from '../../store/actions/testCreator';\nimport { StickyContainer, Sticky } from 'react-sticky';\nimport { firebase } from '../../firebase/firebase';\nimport TestTitle from './TestComponents/TestTitle';\nimport TestCreatorCompany from './TestComponents/TestCreatorCompany';\nimport TestType from './TestComponents/TestType';\nimport TestDeadline from './TestComponents/TestDeadline';\nimport TestDuration from './TestComponents/TestDuration';\nimport TestDescription from './TestComponents/TestDescription';\nimport Button from './TestComponents/Button';\nimport QuestionCreator from './QuestionCreator/QuestionCreator';\nimport TestPassScore from './TestComponents/TestPassScore';\nimport TestTotalScore from './TestComponents/TestTotalScore';\nimport SuccessText from './TestComponents/TestCreateSuccessText';\nimport { Redirect } from \"react-router\";\nvar Main = styled.div(_templateObject());\nvar FlexRow = styled.div(_templateObject2(), function (props) {\n  return props.width || '100%';\n});\nvar QuestionsDiv = styled.div(_templateObject3());\nvar TestHeader = styled.div(_templateObject4());\nvar Stickyheader = styled.div(_templateObject5());\n\nvar TestCreator =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TestCreator, _Component);\n\n  function TestCreator(props) {\n    var _this;\n\n    _classCallCheck(this, TestCreator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TestCreator).call(this, props));\n\n    _this.getInputValue = function (e, field) {\n      var value = e.target.value;\n\n      if (e.target.type === 'number') {\n        if (value < 0) {\n          value = +value * -1;\n        } else if (value > 0) {\n          value = +value;\n        } else {\n          value = '';\n        }\n      }\n\n      _this.setState(_defineProperty({}, field, value));\n    };\n\n    _this.clearWordFromSpaces = function (word) {\n      return word.replace(/^[ ]+/g, '').replace(/\\s*$/, '');\n    };\n\n    _this.isFilled = function (inputValue) {\n      return !inputValue && _this.props.submitted ? true : false;\n    };\n\n    _this.addQuestion = function () {\n      if (_this.testHeaderValidation()) {\n        if (!_this.props.isQuestionValid) {\n          _this.props.submittedTrue();\n        } else {\n          _this.props.submittedFalse();\n        }\n\n        _this.props.addQuestion();\n\n        _this.props.questionNotValid();\n\n        _this.props.ansnwerNotValid();\n\n        _this.props.testCreatedFalse();\n      }\n    };\n\n    _this.getQuestionValues = function (id, state) {\n      var questions = _this.props.questions.map(function (question) {\n        if (question.id === id) {\n          question.questionTitle = state.questionTitle;\n          question.isRight = +state.isRight;\n          question.score = state.score;\n          question.answers = state.answers;\n        }\n\n        return question;\n      });\n\n      _this.props.updateQuestions(questions);\n    };\n\n    _this.testHeaderValidation = function () {\n      var state = _this.state;\n      return state.testTitle && state.description && state.testDeadline && state.description && state.testDuration && state.testType && (_this.props.questions.length && _this.props.isQuestionValid && _this.props.isAnswerValid || !_this.props.questions.length);\n    };\n\n    _this.postData = function () {\n      var db = firebase.database();\n\n      var test = _objectSpread({\n        id: Date.now()\n      }, _this.state, {\n        testTitle: _this.clearWordFromSpaces(_this.state.testTitle),\n        description: _this.clearWordFromSpaces(_this.state.description),\n        company: _this.props.user.name,\n        questions: _this.props.questions,\n        isEditing: false,\n        companyId: _this.props.user.id,\n        passers: 0\n      });\n\n      db.ref('tests').push(_objectSpread({}, test));\n    };\n\n    _this.submitHandler = function () {\n      return new Promise(function (resolve, reject) {\n        _this.props.submittedTrue();\n\n        resolve(_this.props.submitted);\n      }).then(function () {\n        if (_this.testHeaderValidation() && _this.state.passScore && _this.state.passScore <= _this.props.totalScore) {\n          _this.postData();\n\n          _this.props.deleteStateData();\n\n          _this.setState({\n            testTitle: '',\n            description: '',\n            testDeadline: '',\n            testType: '',\n            passScore: '',\n            testDuration: ''\n          });\n        }\n      });\n    };\n\n    _this.state = {\n      testTitle: '',\n      description: '',\n      testDeadline: '',\n      testType: '',\n      passScore: '',\n      testDuration: ''\n    };\n    return _this;\n  }\n\n  _createClass(TestCreator, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return this.props.user && this.props.user.type === \"company\" ? React.createElement(Main, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(StickyContainer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(TestHeader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(FlexRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(TestTitle, {\n        getInputValue: this.getInputValue,\n        value: this.state.testTitle,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }), React.createElement(TestCreatorCompany, {\n        value: this.props.user && this.props.user.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }), React.createElement(TestType, {\n        getInputValue: this.getInputValue,\n        value: this.state.testType,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      })), React.createElement(FlexRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }, React.createElement(TestDescription, {\n        getInputValue: this.getInputValue,\n        value: this.state.description,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      })), React.createElement(Sticky, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, function (_ref) {\n        var style = _ref.style;\n        return React.createElement(Stickyheader, {\n          style: style,\n          isSticky: true,\n          topOffset: 0,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 209\n          },\n          __self: this\n        }, React.createElement(FlexRow, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210\n          },\n          __self: this\n        }, React.createElement(TestDeadline, {\n          getInputValue: _this2.getInputValue,\n          value: _this2.state.testDeadline,\n          isFilled: _this2.isFilled,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 212\n          },\n          __self: this\n        }), React.createElement(TestDuration, {\n          getInputValue: _this2.getInputValue,\n          value: _this2.state.testDuration,\n          isFilled: _this2.isFilled,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217\n          },\n          __self: this\n        }), React.createElement(Button, {\n          onClick: _this2.addQuestion,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        }, \"ADD QUESTION\")));\n      })), !this.props.testCreated && this.props.questions.length > 0 && React.createElement(React.Fragment, null, React.createElement(QuestionsDiv, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, this.props.questions.map(function (question, index) {\n        return React.createElement(QuestionCreator, {\n          key: question.id + index,\n          id: question.id,\n          count: index + 1,\n          isFilled: _this2.isFilled,\n          clearWordFromSpaces: _this2.clearWordFromSpaces,\n          getQuestionValues: _this2.getQuestionValues,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235\n          },\n          __self: this\n        });\n      })), React.createElement(FlexRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(TestTotalScore, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }), React.createElement(TestPassScore, {\n        getInputValue: this.getInputValue,\n        value: this.state.passScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.submitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }, \"CREATE TEST\"))), React.createElement(FlexRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, this.props.testCreated && React.createElement(SuccessText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      })))) : React.createElement(Redirect, {\n        to: \"/authorization\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return TestCreator;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    totalScore: state.testCreator.totalScore,\n    submitted: state.testCreator.addQuestionSubmitted,\n    questions: state.testCreator.questions,\n    isAnswerValid: state.testCreator.isAnswerValid,\n    isQuestionValid: state.testCreator.isQuestionValid,\n    testCreated: state.testCreator.testCreated\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addQuestion: function addQuestion() {\n      return dispatch(_addQuestion());\n    },\n    addQuestionSubmitted: function addQuestionSubmitted() {\n      return dispatch(_addQuestionSubmitted());\n    },\n    submittedTrue: function submittedTrue() {\n      return dispatch(_submittedTrue());\n    },\n    submittedFalse: function submittedFalse() {\n      return dispatch(_submittedFalse());\n    },\n    updateQuestions: function updateQuestions(questions) {\n      return dispatch(_updateQuestions(questions));\n    },\n    questionNotValid: function questionNotValid() {\n      return dispatch(_questionNotValid());\n    },\n    ansnwerNotValid: function ansnwerNotValid() {\n      return dispatch(answerNotValid());\n    },\n    deleteStateData: function deleteStateData() {\n      return dispatch(_deleteStateData());\n    },\n    testCreatedFalse: function testCreatedFalse() {\n      return dispatch(_testCreatedFalse());\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TestCreator);","map":{"version":3,"sources":["C:\\Users\\Gohar\\Desktop\\testing-project\\testing-project\\src\\components\\TestCreator\\TestCreator.js"],"names":["React","Component","styled","connect","addQuestion","addQuestionSubmitted","submittedTrue","submittedFalse","updateQuestions","questionNotValid","answerNotValid","deleteStateData","testCreatedFalse","StickyContainer","Sticky","firebase","TestTitle","TestCreatorCompany","TestType","TestDeadline","TestDuration","TestDescription","Button","QuestionCreator","TestPassScore","TestTotalScore","SuccessText","Redirect","Main","div","FlexRow","props","width","QuestionsDiv","TestHeader","Stickyheader","TestCreator","getInputValue","e","field","value","target","type","setState","clearWordFromSpaces","word","replace","isFilled","inputValue","submitted","testHeaderValidation","isQuestionValid","ansnwerNotValid","getQuestionValues","id","state","questions","map","question","questionTitle","isRight","score","answers","testTitle","description","testDeadline","testDuration","testType","length","isAnswerValid","postData","db","database","test","Date","now","company","user","name","isEditing","companyId","passers","ref","push","submitHandler","Promise","resolve","reject","then","passScore","totalScore","style","testCreated","index","mapStateToProps","testCreator","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport styled  from 'styled-components'\r\nimport { connect } from 'react-redux';\r\nimport { addQuestion, addQuestionSubmitted, submittedTrue, submittedFalse, updateQuestions, questionNotValid, answerNotValid, deleteStateData, testCreatedFalse } from '../../store/actions/testCreator';\r\nimport { StickyContainer, Sticky } from 'react-sticky';\r\nimport { firebase } from '../../firebase/firebase';\r\nimport TestTitle from './TestComponents/TestTitle';\r\nimport TestCreatorCompany from './TestComponents/TestCreatorCompany';\r\nimport TestType from './TestComponents/TestType';\r\nimport TestDeadline from './TestComponents/TestDeadline';\r\nimport TestDuration from './TestComponents/TestDuration';\r\nimport TestDescription from './TestComponents/TestDescription';\r\nimport Button from './TestComponents/Button';\r\nimport QuestionCreator from './QuestionCreator/QuestionCreator';\r\nimport TestPassScore from './TestComponents/TestPassScore';\r\nimport TestTotalScore from './TestComponents/TestTotalScore';\r\nimport SuccessText from './TestComponents/TestCreateSuccessText';\r\nimport {Redirect} from \"react-router\";\r\n\r\nconst Main = styled.div`\r\n\tmargin: auto;\r\n\tmax-width: 1200px;\r\n\tfont-size: 24px;\r\n\toverflow: auto;\r\n`;\r\n\r\nconst FlexRow = styled.div`\r\n\tdisplay: flex;\r\n\tposition: relative;\r\n\tflex-direction: row;\r\n\tflex-wrap: wrap;\r\n\tmargin: 35px 0;\r\n\tjustify-content: space-between;\r\n\twidth: ${props => props.width || '100%'};\r\n\tbox-sizing: border-box;\r\n\r\n\t@media screen and (max-width: 1190px) {\r\n\t\tflex-direction: column;\r\n\t\tmin-width: 100%;\r\n\t}\r\n`;\r\n\r\nconst QuestionsDiv = styled.div`\r\n    border-bottom: 1px solid #D6D6D6;\r\n`;\r\n\r\nconst TestHeader = styled.div`\r\n    border-bottom: 1px solid #D6D6D6;\r\n    \r\n`;\r\nconst Stickyheader = styled.div`\r\n\tbackground-color: white;\r\n\tposition: relative;\r\n\tz-index:2;\r\n`;\r\n\r\nclass TestCreator extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttestTitle: '',\r\n\t\t\tdescription: '',\r\n\t\t\ttestDeadline: '',\r\n            testType: '',\r\n            passScore: '',\r\n\t\t\ttestDuration: '',\r\n\t\t}\r\n\t}\r\n    getInputValue = (e, field) => {\r\n        let value = e.target.value;\r\n        if (e.target.type === 'number') {\r\n            if (value < 0) {\r\n                value = +value * (-1);\r\n            } else if (value > 0) {\r\n                value = +value;\r\n            } else {\r\n                value = '';\r\n            }\r\n        }\r\n        this.setState({ [field]: value });\r\n    }\r\n\r\n    clearWordFromSpaces = (word) => {\r\n\t\treturn word.replace(/^[ ]+/g, '').replace(/\\s*$/, '');\r\n    }\r\n\r\n    isFilled = (inputValue) => {\r\n        return !inputValue && this.props.submitted ? true : false;\r\n    }\r\n    \r\n    addQuestion = () => {\r\n       \r\n        if (this.testHeaderValidation()) {\r\n\t\t\tif (!this.props.isQuestionValid ) {\r\n\t\t\t\tthis.props.submittedTrue()\r\n\t\t\t} else {\r\n\t\t\t\tthis.props.submittedFalse();\r\n\t\t\t}\r\n\t\t\tthis.props.addQuestion();\r\n\t\t\tthis.props.questionNotValid();\r\n\t\t\tthis.props.ansnwerNotValid();\r\n\t\t\tthis.props.testCreatedFalse();\r\n\t\t}\r\n\t\t\r\n    }\r\n\r\n    getQuestionValues = (id, state) => {\r\n\t\tlet questions = this.props.questions.map(question => {\r\n\t\t\tif (question.id === id) {\r\n\t\t\t\tquestion.questionTitle = state.questionTitle;\r\n\t\t\t\tquestion.isRight = +state.isRight; \r\n\t\t\t\tquestion.score = state.score;\r\n\t\t\t\tquestion.answers = state.answers;\r\n\t\t\t}\r\n\t\t\treturn question;\r\n\t\t})\r\n\t\tthis.props.updateQuestions(questions);\r\n\t}\r\n\r\n\ttestHeaderValidation = () => {\r\n\t\tlet state = this.state;\r\n\t\treturn state.testTitle \r\n\t\t\t\t&& state.description\r\n\t\t\t\t&& state.testDeadline \r\n\t\t\t\t&& state.description \r\n\t\t\t\t&& state.testDuration \r\n\t\t\t\t&& state.testType \r\n\t\t\t\t&& ((this.props.questions.length\r\n\t\t\t\t\t &&  this.props.isQuestionValid \r\n\t\t\t\t\t &&  this.props.isAnswerValid) \r\n\t\t\t\t\t|| !this.props.questions.length)\r\n\t\t\t\t\r\n\t}\r\n\t\r\n    \r\n    postData = () => {\r\n\t\tlet db = firebase.database();\r\n\t\tlet test = {\r\n\t\t\t\tid: Date.now(),\r\n\t\t\t\t...this.state,\r\n\t\t\t\ttestTitle: this.clearWordFromSpaces(this.state.testTitle),\r\n\t\t\t\tdescription: this.clearWordFromSpaces(this.state.description),\r\n\t\t\t\tcompany: this.props.user.name,\r\n\t\t\t\tquestions: this.props.questions,\r\n\t\t\t\tisEditing: false,\r\n\t\t\t\tcompanyId: this.props.user.id,\r\n                passers: 0,\r\n\t\t};\r\n\t\tdb.ref('tests').push({...test })\r\n\t}\r\n\r\n    submitHandler = () => {\r\n\t\treturn new Promise ((resolve, reject) => {\r\n\t\t\tthis.props.submittedTrue();\r\n\t\t\tresolve(this.props.submitted)\r\n\t\t}) .then (() => {\r\n\t\t\tif (this.testHeaderValidation()\r\n\t\t\t\t&& this.state.passScore\r\n\t\t\t\r\n\t\t\t\t&& (this.state.passScore <= this.props.totalScore)) {\r\n\r\n\t\t\t\tthis.postData();\r\n\t\t\t\tthis.props.deleteStateData();\r\n\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\ttestTitle: '',\r\n\t\t\t\t\tdescription: '',\r\n\t\t\t\t\ttestDeadline: '',\r\n\t\t\t\t\ttestType: '',\r\n\t\t\t\t\tpassScore: '',\r\n\t\t\t\t\ttestDuration: '',\r\n\t\t\t\t\t\r\n\t\t\t\t})\t\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\t\r\n    render() {\r\n\t\treturn (\r\n\t\t\t(this.props.user && this.props.user.type === \"company\") ?\r\n\t\t\t  <Main>\r\n\t\t\t\t<StickyContainer>\r\n\t\t\t\t<TestHeader>\r\n\t\t\t\t\t<FlexRow>\r\n\t\t\t\t\t\t<TestTitle\r\n\t\t\t\t\t\t\tgetInputValue={this.getInputValue}\r\n\t\t\t\t\t\t\tvalue={this.state.testTitle}\r\n\t\t\t\t\t\t\tisFilled={this.isFilled}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<TestCreatorCompany \r\n\t\t\t\t\t\t\tvalue={this.props.user && this.props.user.name}\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<TestType \r\n\t\t\t\t\t\t\tgetInputValue={this.getInputValue}\r\n\t\t\t\t\t\t\tvalue={this.state.testType}\r\n\t\t\t\t\t\t\tisFilled={this.isFilled} \r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</FlexRow>\r\n\t\t\t\t\t<FlexRow>\r\n\t\t\t\t\t\t<TestDescription \r\n\t\t\t\t\t\t\tgetInputValue={this.getInputValue}\r\n\t\t\t\t\t\t\tvalue={this.state.description}\r\n\t\t\t\t\t\t\tisFilled={this.isFilled}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</FlexRow>\r\n\t\t\t\t\t<Sticky>\r\n\t\t\t\t\t\t{({\tstyle, }) => (\r\n\t\t\t\t\t\t<Stickyheader style={style} isSticky={true} topOffset={0}>\r\n\t\t\t\t\t\t<FlexRow >\t\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<TestDeadline \r\n\t\t\t\t\t\t\t\tgetInputValue={this.getInputValue}\r\n\t\t\t\t\t\t\t\tvalue={this.state.testDeadline}\r\n\t\t\t\t\t\t\t\tisFilled={this.isFilled} \r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<TestDuration\r\n\t\t\t\t\t\t\t\tgetInputValue={this.getInputValue}\r\n\t\t\t\t\t\t\t\tvalue={this.state.testDuration}\r\n\t\t\t\t\t\t\t\tisFilled={this.isFilled}  \r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t<Button onClick={this.addQuestion} >ADD QUESTION</Button>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t</FlexRow>\r\n\t\t\t\t\t\t</Stickyheader>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t\r\n\t\t\t\t\t</Sticky>\r\n\t\t\t\t</TestHeader>\r\n\t\t\t\t{!this.props.testCreated && this.props.questions.length > 0 && \r\n\t\t\t\t\t<>\r\n\t\t\t\t\t\t<QuestionsDiv>\r\n\t\t\t\t\t\t\t{this.props.questions.map((question, index) =>\r\n\t\t\t\t\t\t\t\t<QuestionCreator\r\n\t\t\t\t\t\t\t\t\tkey={question.id + index}\r\n\t\t\t\t\t\t\t\t\tid={question.id}\r\n\t\t\t\t\t\t\t\t\tcount={index + 1}\r\n\t\t\t\t\t\t\t\t\tisFilled={this.isFilled}\r\n\t\t\t\t\t\t\t\t\tclearWordFromSpaces={this.clearWordFromSpaces}\r\n\t\t\t\t\t\t\t\t\tgetQuestionValues={this.getQuestionValues}  \r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</QuestionsDiv>\r\n\t\t\t\t\t\t<FlexRow>\r\n\t\t\t\t\t\t\t<TestTotalScore />\r\n\t\t\t\t\t\t\t<TestPassScore\r\n\t\t\t\t\t\t\t\tgetInputValue={this.getInputValue}\r\n\t\t\t\t\t\t\t\tvalue={this.state.passScore}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<Button onClick={this.submitHandler}>\r\n\t\t\t\t\t\t\t\tCREATE TEST\r\n\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t</FlexRow>\r\n\t\t\t\t\t</> \r\n                }\r\n\r\n                <FlexRow>\r\n                   {this.props.testCreated && <SuccessText/>} \r\n                </FlexRow>\r\n\t\t\t\t</StickyContainer>\r\n\t\t\t</Main>\r\n\t\t\t: <Redirect to='/authorization'/>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n        totalScore: state.testCreator.totalScore,\r\n        submitted: state.testCreator.addQuestionSubmitted,\r\n\t\tquestions: state.testCreator.questions,\r\n\t\tisAnswerValid: state.testCreator.isAnswerValid,\r\n\t\tisQuestionValid: state.testCreator.isQuestionValid,\r\n\t\ttestCreated: state.testCreator.testCreated,\r\n\r\n\t}\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n\treturn {\r\n        addQuestion: () => dispatch(addQuestion()),\r\n        addQuestionSubmitted: () => dispatch(addQuestionSubmitted()),\r\n\t\tsubmittedTrue : () => dispatch(submittedTrue()),\r\n\t\tsubmittedFalse : () => dispatch(submittedFalse()),\r\n        updateQuestions: (questions) => dispatch(updateQuestions(questions)),\r\n        questionNotValid: () => dispatch(questionNotValid()),\r\n        ansnwerNotValid: () => dispatch(answerNotValid()),\r\n\t\tdeleteStateData: () => dispatch(deleteStateData()),\r\n\t\ttestCreatedFalse: () => dispatch(testCreatedFalse()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TestCreator)\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}