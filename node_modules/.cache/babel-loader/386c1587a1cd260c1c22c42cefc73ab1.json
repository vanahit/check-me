{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\src\\\\containers\\\\QuizCreator\\\\TestHeader.js\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    border-bottom: 1px solid #D6D6D6;\\n    border-top: 1px solid #D6D6D6;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n\\tdisplay: flex;\\n\\tposition: relative;\\n\\tflex-direction: row;\\n\\tflex-wrap: wrap;\\n\\tmargin: 30px 0;\\n\\tjustify-content: space-between;\\n\\twidth: \", \";\\n\\tbox-sizing: border-box;\\n\\n\\t@media screen and (max-width: 1190px) {\\n\\t\\tflex-direction: column;\\n\\t\\tmin-width: 100%;\\n\\t}\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\tmargin: auto;\\n\\tmax-width: 1200px;\\n\\tfont-size: 24px;\\n\\toverflow: auto;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport styled, { css } from 'styled-components';\nimport { connect } from 'react-redux';\nimport { addQuestion as _addQuestion, addQuestionSubmitted as _addQuestionSubmitted } from '../../store/actions/testCreator';\nimport 'react-sticky-header/styles.css';\nimport { StickyContainer, Sticky } from 'react-sticky';\nimport TestTitle from './TestComponents/TestTitle';\nimport TestCreatorCompany from './TestComponents/TestCreatorCompany';\nimport TestType from './TestComponents/TestType';\nimport TestDeadline from './TestComponents/TestDeadline';\nimport TestDuration from './TestComponents/TestDuration';\nimport TestDescription from './TestComponents/TestDescription';\nimport Button from '../../components/QuizCreator/Button';\nimport QuestionCreator from './QuestionCreator/QuestionCreator';\nimport TestPassScore from './TestComponents/TestPassScore';\nimport TestTotalScore from './TestComponents/TestTotalScore';\nvar Main = styled.div(_templateObject());\nvar FlexRow = styled.div(_templateObject2(), function (props) {\n  return props.width || '100%';\n});\nvar QuestionsDiv = styled.div(_templateObject3());\n\nvar TestHeader =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TestHeader, _Component);\n\n  function TestHeader(props) {\n    var _this;\n\n    _classCallCheck(this, TestHeader);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TestHeader).call(this, props));\n\n    _this.getInputValue = function (e, field) {\n      var value = e.target.value;\n      value = _this.clearWordFromSpaces(value);\n\n      if (e.target.type === 'number') {\n        if (value < 0) {\n          value = +value * -1;\n        } else if (value > 0) {\n          value = +value;\n        } else {\n          value = '';\n        }\n      }\n\n      _this.setState(_defineProperty({}, field, value));\n    };\n\n    _this.clearWordFromSpaces = function (word) {\n      return word.replace(/^[ ]+/g, '').replace(/\\s*$/, '');\n    };\n\n    _this.checkInputValidation = function (e) {\n      var placeholder = '';\n      var invalidPlaceholder = '';\n\n      if (e.target.placeholder) {\n        placeholder = e.target.placeholder;\n        invalidPlaceholder = \"Fill \".concat(placeholder);\n      }\n\n      e.target.placeholder = !e.target.value ? invalidPlaceholder : placeholder.replace('Fill ', '');\n    };\n\n    _this.isFilled = function (inputValue) {\n      return !inputValue && _this.props.submitted ? true : false;\n    };\n\n    _this.addQuestion = function () {\n      _this.props.addQuestionSubmitted();\n\n      _this.props.addQuestion();\n\n      if (_this.formValidation()) {}\n    };\n\n    _this.formValidation = function () {\n      var state = _this.state;\n      return state.testTitle && state.description && state.testDeadline && state.description && state.company && state.testDuration && state.testType;\n    };\n\n    _this.state = {\n      testTitle: '',\n      description: '',\n      testDeadline: '',\n      testType: '',\n      company: '',\n      testDuration: '',\n      questions: _this.props.question\n    };\n    return _this;\n  }\n\n  _createClass(TestHeader, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Main, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(FlexRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(TestTitle, {\n        submitted: this.state.submitted,\n        validation: this.checkInputValidation,\n        getInputValue: this.getInputValue,\n        value: this.state.testTitle,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }), React.createElement(TestCreatorCompany, {\n        validation: this.checkInputValidation,\n        getInputValue: this.getInputValue,\n        value: this.state.company,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }), React.createElement(TestType, {\n        validation: this.checkInputValidation,\n        getInputValue: this.getInputValue,\n        value: this.state.testType,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      })), React.createElement(FlexRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }, React.createElement(TestDescription, {\n        validation: this.checkInputValidation,\n        getInputValue: this.getInputValue,\n        value: this.state.description,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      })), React.createElement(FlexRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(TestDeadline, {\n        validation: this.checkInputValidation,\n        getInputValue: this.getInputValue,\n        value: this.state.testDeadline,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }), React.createElement(TestDuration, {\n        validation: this.checkInputValidation,\n        getInputValue: this.getInputValue,\n        value: this.state.testDuration,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.addQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, \"ADD QUESTION\")), this.props.questions.length > 0 && React.createElement(QuestionsDiv, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, this.props.questions.map(function (question, index) {\n        return React.createElement(QuestionCreator, {\n          key: question.id + index,\n          id: question.id,\n          count: index + 1,\n          validation: _this2.checkInputValidation,\n          isFilled: _this2.isFilled,\n          clearWordFromSpaces: _this2.clearWordFromSpaces,\n          checkInputValidation: _this2.checkInputValidation,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        });\n      })), this.props.questions.length > 0 && React.createElement(FlexRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(TestTotalScore, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }), React.createElement(TestPassScore, {\n        validation: this.checkInputValidation,\n        getInputValue: this.getInputValue,\n        value: this.state.passScore,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.submitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, \"CREATE TEST\")));\n    }\n  }]);\n\n  return TestHeader;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    totalScore: state.testCreator.totalScore,\n    submitted: state.testCreator.addQuestionSubmitted,\n    questions: state.testCreator.questions\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addQuestion: function addQuestion() {\n      return dispatch(_addQuestion());\n    },\n    addQuestionSubmitted: function addQuestionSubmitted() {\n      return dispatch(_addQuestionSubmitted());\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TestHeader);","map":{"version":3,"sources":["C:\\Users\\Gohar\\Desktop\\testing-project\\testing-project\\src\\containers\\QuizCreator\\TestHeader.js"],"names":["React","Component","styled","css","connect","addQuestion","addQuestionSubmitted","StickyContainer","Sticky","TestTitle","TestCreatorCompany","TestType","TestDeadline","TestDuration","TestDescription","Button","QuestionCreator","TestPassScore","TestTotalScore","Main","div","FlexRow","props","width","QuestionsDiv","TestHeader","getInputValue","e","field","value","target","clearWordFromSpaces","type","setState","word","replace","checkInputValidation","placeholder","invalidPlaceholder","isFilled","inputValue","submitted","formValidation","state","testTitle","description","testDeadline","company","testDuration","testType","questions","question","prevProps","prevState","length","map","index","id","passScore","submitHandler","mapStateToProps","totalScore","testCreator","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport styled, {css} from 'styled-components'\r\nimport { connect } from 'react-redux';\r\nimport { addQuestion, addQuestionSubmitted } from '../../store/actions/testCreator';\r\nimport 'react-sticky-header/styles.css';\r\nimport { StickyContainer, Sticky } from 'react-sticky';\r\nimport TestTitle from './TestComponents/TestTitle';\r\nimport TestCreatorCompany from './TestComponents/TestCreatorCompany';\r\nimport TestType from './TestComponents/TestType';\r\nimport TestDeadline from './TestComponents/TestDeadline';\r\nimport TestDuration from './TestComponents/TestDuration';\r\nimport TestDescription from './TestComponents/TestDescription';\r\nimport Button from '../../components/QuizCreator/Button';\r\nimport QuestionCreator from './QuestionCreator/QuestionCreator';\r\nimport TestPassScore from './TestComponents/TestPassScore';\r\nimport TestTotalScore from './TestComponents/TestTotalScore';\r\n\r\nconst Main = styled.div`\r\n\tmargin: auto;\r\n\tmax-width: 1200px;\r\n\tfont-size: 24px;\r\n\toverflow: auto;\r\n`;\r\n\r\nconst FlexRow = styled.div`\r\n\tdisplay: flex;\r\n\tposition: relative;\r\n\tflex-direction: row;\r\n\tflex-wrap: wrap;\r\n\tmargin: 30px 0;\r\n\tjustify-content: space-between;\r\n\twidth: ${props => props.width || '100%'};\r\n\tbox-sizing: border-box;\r\n\r\n\t@media screen and (max-width: 1190px) {\r\n\t\tflex-direction: column;\r\n\t\tmin-width: 100%;\r\n\t}\r\n`;\r\nconst QuestionsDiv = styled.div`\r\n    border-bottom: 1px solid #D6D6D6;\r\n    border-top: 1px solid #D6D6D6;\r\n`;\r\n\r\nclass TestHeader extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttestTitle: '',\r\n\t\t\tdescription: '',\r\n\t\t\ttestDeadline: '',\r\n\t\t\ttestType: '',\r\n\t\t\tcompany: '',\r\n            testDuration: '',\r\n            questions: this.props.question,\r\n        }\r\n\t}\r\n    getInputValue = (e, field) => {\r\n        let value = e.target.value;\r\n        value = this.clearWordFromSpaces(value);\r\n        \r\n        if (e.target.type === 'number') {\r\n            if (value < 0) {\r\n                value = +value * (-1);\r\n            } else if (value > 0) {\r\n                value = +value;\r\n            } else {\r\n                value = '';\r\n            }\r\n        }\r\n        this.setState({ [field]: value });\r\n    }\r\n\r\n    clearWordFromSpaces = (word) => {\r\n\t\treturn word.replace(/^[ ]+/g, '').replace(/\\s*$/, '');\r\n    }\r\n    \r\n    checkInputValidation = (e) => {\r\n        let placeholder = '';\r\n        let invalidPlaceholder = '';\r\n\r\n        if (e.target.placeholder) {\r\n            placeholder =  e.target.placeholder\r\n            invalidPlaceholder = `Fill ${placeholder}`;\r\n        }\r\n        \r\n        e.target.placeholder = !e.target.value \r\n            ? invalidPlaceholder \r\n            : placeholder.replace('Fill ','');\r\n    }\r\n    \r\n    isFilled = (inputValue) => {\r\n        return !inputValue && this.props.submitted ? true : false;\r\n    }\r\n    \r\n    addQuestion = () => {\r\n        this.props.addQuestionSubmitted();\r\n        this.props.addQuestion();\r\n        if (this.formValidation()) {\r\n           \r\n        }\r\n    }\r\n\r\n\tformValidation = () => {\r\n\t\tlet state = this.state;\r\n\t\treturn state.testTitle \r\n\t\t\t\t&& state.description\r\n\t\t\t\t&& state.testDeadline \r\n\t\t\t\t&& state.description \r\n\t\t\t\t&& state.company \r\n\t\t\t\t&& state.testDuration \r\n\t\t\t\t&& state.testType \r\n\t}\r\n    \r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n            <Main>\r\n                <FlexRow>\r\n                    <TestTitle\r\n                        submitted={this.state.submitted}\r\n                        validation={this.checkInputValidation}\r\n                        getInputValue={this.getInputValue}\r\n                        value={this.state.testTitle}\r\n                        isFilled={this.isFilled}\r\n                    />\r\n                    <TestCreatorCompany \r\n                        validation={this.checkInputValidation}\r\n                        getInputValue={this.getInputValue}\r\n                        value={this.state.company}\r\n                        isFilled={this.isFilled} \r\n                    />\r\n                    <TestType \r\n                        validation={this.checkInputValidation}\r\n                        getInputValue={this.getInputValue}\r\n                        value={this.state.testType}\r\n                        isFilled={this.isFilled} \r\n                    />\r\n                </FlexRow>\r\n                <FlexRow>\r\n                    <TestDescription \r\n                        validation={this.checkInputValidation}\r\n                        getInputValue={this.getInputValue}\r\n                        value={this.state.description}\r\n                        isFilled={this.isFilled}\r\n                    />\r\n                </FlexRow>\r\n                <FlexRow>\r\n                    <TestDeadline \r\n                        validation={this.checkInputValidation}\r\n                        getInputValue={this.getInputValue}\r\n                        value={this.state.testDeadline}\r\n                        isFilled={this.isFilled} \r\n                    />\r\n                    <TestDuration\r\n                        validation={this.checkInputValidation}\r\n                        getInputValue={this.getInputValue}\r\n                        value={this.state.testDuration}\r\n                        isFilled={this.isFilled}  \r\n                    />\r\n                   <Button onClick={this.addQuestion}>ADD QUESTION</Button>\r\n                </FlexRow>\r\n                {this.props.questions.length > 0 && \r\n\t\t\t\t\t<QuestionsDiv>\r\n\t\t\t\t\t\t{this.props.questions.map((question, index) =>\r\n\t\t\t\t\t\t\t<QuestionCreator\r\n\t\t\t\t\t\t\t   \tkey={question.id + index}\r\n\t\t\t\t\t\t\t\tid={question.id}\r\n                                count={index + 1}\r\n                                validation={this.checkInputValidation}\r\n                                isFilled={this.isFilled}\r\n                                clearWordFromSpaces={this.clearWordFromSpaces}\r\n                                checkInputValidation={this.checkInputValidation}  \r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</QuestionsDiv>\r\n                }\r\n                {this.props.questions.length > 0 && \r\n                    <FlexRow>\r\n                        <TestTotalScore />\r\n                        <TestPassScore\r\n                            validation={this.checkInputValidation}\r\n                            getInputValue={this.getInputValue}\r\n                            value={this.state.passScore}\r\n                            isFilled={this.isFilled}  \r\n                        />\r\n                        <Button onClick={this.submitHandler}>\r\n                             CREATE TEST\r\n                        </Button>\r\n                    </FlexRow>  \r\n                }\r\n            </Main>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n        totalScore: state.testCreator.totalScore,\r\n        submitted: state.testCreator.addQuestionSubmitted,\r\n        questions: state.testCreator.questions,\r\n\t}\r\n}\r\n\r\nfunction mapDispatchToProps(dispatch) {\r\n\treturn {\r\n        addQuestion: () => dispatch(addQuestion()),\r\n        addQuestionSubmitted: () => dispatch(addQuestionSubmitted()),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TestHeader)\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}