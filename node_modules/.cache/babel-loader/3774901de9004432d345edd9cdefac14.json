{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _defineProperty from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\src\\\\containers\\\\QuizCreator\\\\TestCreator.js\";\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n    border-bottom: 1px solid #D6D6D6;\\n    border-top: 1px solid #D6D6D6;\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n\\tdisplay: flex;\\n\\tposition: relative;\\n\\tflex-direction: row;\\n\\tflex-wrap: wrap;\\n\\tmargin: 30px 0;\\n\\tjustify-content: space-between;\\n\\twidth: \", \";\\n\\tbox-sizing: border-box;\\n\\n\\t@media screen and (max-width: 1190px) {\\n\\t\\tflex-direction: column;\\n\\t\\tmin-width: 100%;\\n\\t}\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\tmargin: auto;\\n\\tmax-width: 1200px;\\n\\tfont-size: 24px;\\n\\toverflow: auto;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport { addQuestion as _addQuestion, addQuestionSubmitted as _addQuestionSubmitted, submittedTrue as _submittedTrue, updateQuestions as _updateQuestions, questionNotValid as _questionNotValid, answerNotValid, initialState } from '../../store/actions/testCreator';\nimport 'react-sticky-header/styles.css';\nimport { StickyContainer, Sticky } from 'react-sticky';\nimport { firebase } from '../../firebase/firebase';\nimport TestTitle from './TestComponents/TestTitle';\nimport TestCreatorCompany from './TestComponents/TestCreatorCompany';\nimport TestType from './TestComponents/TestType';\nimport TestDeadline from './TestComponents/TestDeadline';\nimport TestDuration from './TestComponents/TestDuration';\nimport TestDescription from './TestComponents/TestDescription';\nimport Button from '../../components/QuizCreator/Button';\nimport QuestionCreator from './QuestionCreator/QuestionCreator';\nimport TestPassScore from './TestComponents/TestPassScore';\nimport TestTotalScore from './TestComponents/TestTotalScore';\nimport SuccessText from '../../components/QuizCreator/TestCreateSuccessText';\nvar Main = styled.div(_templateObject());\nvar FlexRow = styled.div(_templateObject2(), function (props) {\n  return props.width || '100%';\n});\nvar QuestionsDiv = styled.div(_templateObject3());\n\nvar TestCreator =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TestCreator, _Component);\n\n  function TestCreator(props) {\n    var _this;\n\n    _classCallCheck(this, TestCreator);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TestCreator).call(this, props));\n\n    _this.getInputValue = function (e, field) {\n      var value = e.target.value;\n      value = _this.clearWordFromSpaces(value);\n\n      if (e.target.type === 'number') {\n        if (value < 0) {\n          value = +value * -1;\n        } else if (value > 0) {\n          value = +value;\n        } else {\n          value = '';\n        }\n      }\n\n      _this.setState(_defineProperty({}, field, value));\n    };\n\n    _this.clearWordFromSpaces = function (word) {\n      return word.replace(/^[ ]+/g, '').replace(/\\s*$/, '');\n    };\n\n    _this.isFilled = function (inputValue) {\n      return !inputValue && _this.props.submitted ? true : false;\n    };\n\n    _this.addQuestion = function () {\n      _this.props.addQuestionSubmitted();\n\n      if (_this.formValidation()) {\n        _this.props.addQuestion();\n\n        _this.props.questionNotValid();\n\n        _this.props.ansnwerNotValid();\n      }\n    };\n\n    _this.getQuestionValues = function (id, state) {\n      var questions = _this.props.questions.map(function (question) {\n        if (question.id === id) {\n          question.questionTitle = state.questionTitle;\n          question.isRight = +state.isRight;\n          question.score = state.score;\n          question.answers = state.answers;\n        }\n\n        return question;\n      });\n\n      _this.props.updateQuestions(questions);\n    };\n\n    _this.formValidation = function () {\n      var state = _this.state;\n      return state.testTitle && state.description && state.testDeadline && state.description && state.company && state.testDuration && state.testType;\n    };\n\n    _this.postData = function () {\n      var db = firebase.database();\n\n      var test = _objectSpread({\n        id: Date.now()\n      }, _this.state, {\n        questions: _this.props.questions,\n        isEditing: false,\n        passers: 0\n      });\n\n      db.ref('tests').push(_objectSpread({}, test));\n\n      _this.props.initialState();\n\n      _this.setState({\n        testCreated: true\n      });\n\n      _this.setState({\n        testTitle: '',\n        description: '',\n        testDeadline: '',\n        testType: '',\n        passScore: '',\n        company: '',\n        testDuration: ''\n      });\n    };\n\n    _this.submitHandler = function () {\n      _this.props.submittedTrue();\n\n      if (_this.formValidation() && _this.props.isAnswerValid && _this.props.isQuestionValid) {\n        _this.postData();\n      }\n    };\n\n    _this.state = {\n      testTitle: '',\n      description: '',\n      testDeadline: '',\n      testType: '',\n      passScore: '',\n      company: '',\n      testDuration: ''\n    };\n    return _this;\n  }\n\n  _createClass(TestCreator, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Main, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(FlexRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(TestTitle, {\n        getInputValue: this.getInputValue,\n        value: this.state.testTitle,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }), React.createElement(TestCreatorCompany, {\n        getInputValue: this.getInputValue,\n        value: this.state.company,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(TestType, {\n        getInputValue: this.getInputValue,\n        value: this.state.testType,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      })), React.createElement(FlexRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(TestDescription, {\n        getInputValue: this.getInputValue,\n        value: this.state.description,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      })), React.createElement(FlexRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(TestDeadline, {\n        getInputValue: this.getInputValue,\n        value: this.state.testDeadline,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }), React.createElement(TestDuration, {\n        getInputValue: this.getInputValue,\n        value: this.state.testDuration,\n        isFilled: this.isFilled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.addQuestion,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, \"ADD QUESTION\")), this.props.questions.length > 0 && React.createElement(QuestionsDiv, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189\n        },\n        __self: this\n      }, this.props.questions.map(function (question, index) {\n        return React.createElement(QuestionCreator, {\n          key: question.id + index,\n          id: question.id,\n          count: index + 1,\n          isFilled: _this2.isFilled,\n          clearWordFromSpaces: _this2.clearWordFromSpaces,\n          getQuestionValues: _this2.getQuestionValues,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        });\n      })), this.props.questions.length > 0 && React.createElement(FlexRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(TestTotalScore, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }), React.createElement(TestPassScore, {\n        getInputValue: this.getInputValue,\n        value: this.state.passScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      }), React.createElement(Button, {\n        onClick: this.submitHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"CREATE TEST\")), React.createElement(FlexRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, this.state.testCreated && React.createElement(SuccessText, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return TestCreator;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    totalScore: state.testCreator.totalScore,\n    submitted: state.testCreator.addQuestionSubmitted,\n    questions: state.testCreator.questions\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addQuestion: function addQuestion() {\n      return dispatch(_addQuestion());\n    },\n    addQuestionSubmitted: function addQuestionSubmitted() {\n      return dispatch(_addQuestionSubmitted());\n    },\n    submittedTrue: function submittedTrue() {\n      return dispatch(_submittedTrue());\n    },\n    updateQuestions: function updateQuestions(questions) {\n      return dispatch(_updateQuestions(questions));\n    },\n    questionNotValid: function questionNotValid() {\n      return dispatch(_questionNotValid());\n    },\n    ansnwerNotValid: function ansnwerNotValid() {\n      return dispatch(answerNotValid());\n    },\n    initialState: function initialState() {\n      return dispatch();\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TestCreator);","map":{"version":3,"sources":["C:\\Users\\Gohar\\Desktop\\testing-project\\testing-project\\src\\containers\\QuizCreator\\TestCreator.js"],"names":["React","Component","styled","connect","addQuestion","addQuestionSubmitted","submittedTrue","updateQuestions","questionNotValid","answerNotValid","initialState","StickyContainer","Sticky","firebase","TestTitle","TestCreatorCompany","TestType","TestDeadline","TestDuration","TestDescription","Button","QuestionCreator","TestPassScore","TestTotalScore","SuccessText","Main","div","FlexRow","props","width","QuestionsDiv","TestCreator","getInputValue","e","field","value","target","clearWordFromSpaces","type","setState","word","replace","isFilled","inputValue","submitted","formValidation","ansnwerNotValid","getQuestionValues","id","state","questions","map","question","questionTitle","isRight","score","answers","testTitle","description","testDeadline","company","testDuration","testType","postData","db","database","test","Date","now","isEditing","passers","ref","push","testCreated","passScore","submitHandler","isAnswerValid","isQuestionValid","length","index","mapStateToProps","totalScore","testCreator","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport styled  from 'styled-components'\r\nimport { connect } from 'react-redux';\r\nimport { addQuestion, addQuestionSubmitted, submittedTrue, updateQuestions, questionNotValid, answerNotValid, initialState } from '../../store/actions/testCreator';\r\nimport 'react-sticky-header/styles.css';\r\nimport { StickyContainer, Sticky } from 'react-sticky';\r\nimport { firebase } from '../../firebase/firebase';\r\nimport TestTitle from './TestComponents/TestTitle';\r\nimport TestCreatorCompany from './TestComponents/TestCreatorCompany';\r\nimport TestType from './TestComponents/TestType';\r\nimport TestDeadline from './TestComponents/TestDeadline';\r\nimport TestDuration from './TestComponents/TestDuration';\r\nimport TestDescription from './TestComponents/TestDescription';\r\nimport Button from '../../components/QuizCreator/Button';\r\nimport QuestionCreator from './QuestionCreator/QuestionCreator';\r\nimport TestPassScore from './TestComponents/TestPassScore';\r\nimport TestTotalScore from './TestComponents/TestTotalScore';\r\nimport SuccessText from '../../components/QuizCreator/TestCreateSuccessText';\r\n\r\nconst Main = styled.div`\r\n\tmargin: auto;\r\n\tmax-width: 1200px;\r\n\tfont-size: 24px;\r\n\toverflow: auto;\r\n`;\r\n\r\nconst FlexRow = styled.div`\r\n\tdisplay: flex;\r\n\tposition: relative;\r\n\tflex-direction: row;\r\n\tflex-wrap: wrap;\r\n\tmargin: 30px 0;\r\n\tjustify-content: space-between;\r\n\twidth: ${props => props.width || '100%'};\r\n\tbox-sizing: border-box;\r\n\r\n\t@media screen and (max-width: 1190px) {\r\n\t\tflex-direction: column;\r\n\t\tmin-width: 100%;\r\n\t}\r\n`;\r\nconst QuestionsDiv = styled.div`\r\n    border-bottom: 1px solid #D6D6D6;\r\n    border-top: 1px solid #D6D6D6;\r\n`;\r\n\r\nclass TestCreator extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\ttestTitle: '',\r\n\t\t\tdescription: '',\r\n\t\t\ttestDeadline: '',\r\n            testType: '',\r\n            passScore: '',\r\n\t\t\tcompany: '',\r\n            testDuration: '',\r\n        }\r\n\t}\r\n    getInputValue = (e, field) => {\r\n        let value = e.target.value;\r\n        value = this.clearWordFromSpaces(value);\r\n        \r\n        if (e.target.type === 'number') {\r\n            if (value < 0) {\r\n                value = +value * (-1);\r\n            } else if (value > 0) {\r\n                value = +value;\r\n            } else {\r\n                value = '';\r\n            }\r\n        }\r\n        this.setState({ [field]: value });\r\n    }\r\n\r\n    clearWordFromSpaces = (word) => {\r\n\t\treturn word.replace(/^[ ]+/g, '').replace(/\\s*$/, '');\r\n    }\r\n\r\n    isFilled = (inputValue) => {\r\n        return !inputValue && this.props.submitted ? true : false;\r\n    }\r\n    \r\n    addQuestion = () => {\r\n        this.props.addQuestionSubmitted();\r\n        if (this.formValidation()) {\r\n           this.props.addQuestion();\r\n           this.props.questionNotValid();\r\n           this.props.ansnwerNotValid();\r\n        }\r\n    }\r\n\r\n    getQuestionValues = (id, state) => {\r\n\t\tlet questions = this.props.questions.map(question => {\r\n\t\t\tif (question.id === id) {\r\n\t\t\t\tquestion.questionTitle = state.questionTitle;\r\n\t\t\t\tquestion.isRight = +state.isRight; \r\n\t\t\t\tquestion.score = state.score;\r\n\t\t\t\tquestion.answers = state.answers;\r\n\t\t\t}\r\n\t\t\treturn question;\r\n\t\t})\r\n\t\tthis.props.updateQuestions(questions);\r\n\t}\r\n\r\n\tformValidation = () => {\r\n\t\tlet state = this.state;\r\n\t\treturn state.testTitle \r\n\t\t\t\t&& state.description\r\n\t\t\t\t&& state.testDeadline \r\n\t\t\t\t&& state.description \r\n\t\t\t\t&& state.company \r\n\t\t\t\t&& state.testDuration \r\n\t\t\t\t&& state.testType \r\n    }\r\n    \r\n    postData = () => {\r\n\t\tlet db = firebase.database();\r\n\t\tlet test = {\r\n\t\t\t\tid: Date.now(),\r\n                ...this.state,\r\n                questions: this.props.questions,\r\n                isEditing: false,\r\n                passers: 0,\r\n\t\t};\r\n\t\tdb.ref('tests').push({...test })\r\n\t\t\tthis.props.initialState();\r\n\t\t\tthis.setState({testCreated: true});\r\n\t\t\tthis.setState({\r\n                testTitle: '',\r\n                description: '',\r\n                testDeadline: '',\r\n                testType: '',\r\n                passScore: '',\r\n                company: '',\r\n                testDuration: '',\r\n\t\t\t})\t\r\n\t}\r\n\r\n    submitHandler = () => {\r\n        this.props.submittedTrue();\r\n        if (this.formValidation() && this.props.isAnswerValid && this.props.isQuestionValid) {\r\n            this.postData();\r\n        }\r\n\t}\r\n\t\r\n    render() {\r\n\t\treturn (\r\n            <Main>\r\n                <FlexRow>\r\n                    <TestTitle\r\n                        getInputValue={this.getInputValue}\r\n                        value={this.state.testTitle}\r\n                        isFilled={this.isFilled}\r\n                    />\r\n                    <TestCreatorCompany \r\n                        getInputValue={this.getInputValue}\r\n                        value={this.state.company}\r\n                        isFilled={this.isFilled} \r\n                    />\r\n                    <TestType \r\n                        getInputValue={this.getInputValue}\r\n                        value={this.state.testType}\r\n                        isFilled={this.isFilled} \r\n                    />\r\n                </FlexRow>\r\n                <FlexRow>\r\n                    <TestDescription \r\n                        getInputValue={this.getInputValue}\r\n                        value={this.state.description}\r\n                        isFilled={this.isFilled}\r\n                    />\r\n                </FlexRow>\r\n                <FlexRow>\r\n                    <TestDeadline \r\n                        getInputValue={this.getInputValue}\r\n                        value={this.state.testDeadline}\r\n                        isFilled={this.isFilled} \r\n                    />\r\n                    <TestDuration\r\n                        getInputValue={this.getInputValue}\r\n                        value={this.state.testDuration}\r\n                        isFilled={this.isFilled}  \r\n                    />\r\n                   <Button onClick={this.addQuestion}>ADD QUESTION</Button>\r\n                </FlexRow>\r\n\r\n                {this.props.questions.length > 0 && \r\n\t\t\t\t\t<QuestionsDiv>\r\n\t\t\t\t\t\t{this.props.questions.map((question, index) =>\r\n\t\t\t\t\t\t\t<QuestionCreator\r\n\t\t\t\t\t\t\t   \tkey={question.id + index}\r\n\t\t\t\t\t\t\t\tid={question.id}\r\n                                count={index + 1}\r\n                                isFilled={this.isFilled}\r\n                                clearWordFromSpaces={this.clearWordFromSpaces}\r\n                                getQuestionValues={this.getQuestionValues}  \r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</QuestionsDiv>\r\n                }\r\n                \r\n                {this.props.questions.length > 0 && \r\n                    <FlexRow>\r\n                        <TestTotalScore />\r\n                        <TestPassScore\r\n                            getInputValue={this.getInputValue}\r\n                            value={this.state.passScore}\r\n                        />\r\n                        <Button onClick={this.submitHandler}>\r\n                             CREATE TEST\r\n                        </Button>\r\n                    </FlexRow>  \r\n                }\r\n\r\n                <FlexRow>\r\n                   {this.state.testCreated && <SuccessText/>} \r\n                </FlexRow>\r\n            </Main>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n        totalScore: state.testCreator.totalScore,\r\n        submitted: state.testCreator.addQuestionSubmitted,\r\n        questions: state.testCreator.questions,\r\n\t}\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n\treturn {\r\n        addQuestion: () => dispatch(addQuestion()),\r\n        addQuestionSubmitted: () => dispatch(addQuestionSubmitted()),\r\n        submittedTrue : () => dispatch(submittedTrue()),\r\n        updateQuestions: (questions) => dispatch(updateQuestions(questions)),\r\n        questionNotValid: () => dispatch(questionNotValid()),\r\n        ansnwerNotValid: () => dispatch(answerNotValid()),\r\n        initialState: () => dispatch(),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TestCreator)\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}