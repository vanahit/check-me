{"ast":null,"code":"'use strict';\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar _Object$getPrototypeOf = _interopDefault(require('babel-runtime/core-js/object/get-prototype-of'));\n\nvar _classCallCheck = _interopDefault(require('babel-runtime/helpers/classCallCheck'));\n\nvar _createClass = _interopDefault(require('babel-runtime/helpers/createClass'));\n\nvar _possibleConstructorReturn = _interopDefault(require('babel-runtime/helpers/possibleConstructorReturn'));\n\nvar _inherits = _interopDefault(require('babel-runtime/helpers/inherits'));\n\nvar React = require('react');\n\nvar React__default = _interopDefault(React);\n\nfunction addEvent(event, cb) {\n  window.addEventListener(event, cb, false);\n  return function () {\n    return window.removeEventListener(event, cb, false);\n  };\n}\n\nvar _class;\n\nvar _temp2;\n\nvar noop = function noop() {};\n\nvar ReactStickyHeader = (_temp2 = _class = function (_Component) {\n  _inherits(ReactStickyHeader, _Component);\n\n  function ReactStickyHeader() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ReactStickyHeader);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactStickyHeader.__proto__ || _Object$getPrototypeOf(ReactStickyHeader)).call.apply(_ref, [this].concat(args))), _this), _this._detatch = noop, _this._rafExecuting = false, _this.state = {\n      isSticky: _this.props.headerOnly\n    }, _this.calculateStickyState = function () {\n      if (_this._rafExecuting) {\n        return;\n      }\n\n      _this._rafExecuting = true;\n      requestAnimationFrame(function () {\n        var stickyHeaderHeight = _this._fixed.offsetHeight;\n        var headerContainer = _this._root.offsetHeight;\n\n        var headerContainerBoundingBox = _this._root.getBoundingClientRect();\n\n        var stickyOffset = _this.props.stickyOffset;\n        var pastStickyThreshold = headerContainer + headerContainerBoundingBox.top - stickyHeaderHeight <= (stickyOffset || 0);\n\n        if (pastStickyThreshold && !_this.state.isSticky) {\n          _this.setState({\n            isSticky: true\n          });\n\n          _this.props.onSticky(true);\n        } else if (!pastStickyThreshold && _this.state.isSticky) {\n          _this.setState({\n            isSticky: false\n          });\n\n          _this.props.onSticky(false);\n        }\n\n        _this._rafExecuting = false;\n      });\n    }, _this.onResize = function () {\n      // We want to flush a re-render incase the children have changed size from CSS.\n      _this.setState({}); // We want to check if because of a resize the header is now sticky or not.\n\n\n      _this.calculateStickyState();\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  } // eslint-disable-next-line react/sort-comp\n\n\n  _createClass(ReactStickyHeader, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.initialise(); // Force state change as we need to calculate the header background containers.\n      // eslint-disable-next-line react/no-did-mount-set-state\n\n      this.setState({});\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this._detatch();\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.headerOnly !== this.props.headerOnly) {\n        this.calculateStickyState();\n      }\n    }\n  }, {\n    key: 'initialise',\n    value: function initialise() {\n      var _this2 = this;\n\n      if (this._initialised) {\n        return;\n      }\n\n      var detatchScroll = addEvent('scroll', this.calculateStickyState);\n      var detatchResize = addEvent('resize', this.onResize);\n\n      this._detatch = function () {\n        [detatchScroll, detatchResize].forEach(function (detatch) {\n          return detatch();\n        });\n        _this2._initialised = false;\n      };\n\n      this.calculateStickyState();\n      this._initialised = true;\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this3 = this;\n\n      var backgroundUrl = this.props.backgroundImage && 'url(\\'' + this.props.backgroundImage + '\\')';\n      var headerClassName = 'ReactStickyHeader_root' + (this.props.className ? ' ' + this.props.className : '');\n      var rootClassName = '' + headerClassName + (this.state.isSticky ? ' is-sticky' : '');\n      var headerContainerHeight = this._root && this._root.offsetHeight;\n      var fixedHeaderHeight = this._fixed && this._fixed.offsetHeight;\n      return React__default.createElement('header', {\n        className: rootClassName,\n        ref: function ref(e) {\n          return _this3._root = e;\n        }\n      }, React__default.createElement('div', {\n        className: 'ReactStickyHeader_fixed',\n        ref: function ref(e) {\n          return _this3._fixed = e;\n        }\n      }, this.props.header), React__default.createElement('div', {\n        className: 'ReactStickyHeader_midground',\n        style: {\n          height: headerContainerHeight || fixedHeaderHeight,\n          top: fixedHeaderHeight,\n          backgroundImage: backgroundUrl,\n          backgroundColor: this.props.backgroundColor\n        }\n      }), this.props.headerOnly && React__default.createElement('div', {\n        style: {\n          height: fixedHeaderHeight\n        }\n      }), this.props.headerOnly || React__default.createElement('div', {\n        className: 'ReactStickyHeader_background-bg',\n        style: {\n          backgroundImage: backgroundUrl,\n          backgroundColor: this.props.backgroundColor\n        }\n      }), this.props.headerOnly || React__default.createElement('div', {\n        className: 'ReactStickyHeader_foreground',\n        style: {\n          opacity: this.state.isSticky ? 0 : 1,\n          backgroundImage: backgroundUrl,\n          backgroundColor: this.props.backgroundColor\n        }\n      }), this.props.headerOnly || this.props.children);\n    }\n  }]);\n\n  return ReactStickyHeader;\n}(React.Component), _class.defaultProps = {\n  onSticky: noop,\n  headerOnly: false\n}, _temp2);\nmodule.exports = ReactStickyHeader;","map":null,"metadata":{},"sourceType":"script"}