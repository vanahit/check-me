{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _taggedTemplateLiteral from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\src\\\\components\\\\TestPassPanel\\\\TestPassPanel.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\tmargin: auto;\\n\\tmargin-top: 190px;\\n\\tmax-width: 1200px;\\n\\tfont-size: 24px;\\n\\tcolor: white;\\n\\toverflow: none;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { connect } from 'react-redux';\nimport TestFinished from './TestFinished';\nimport TestPasser from './TestPasser';\nimport { deleteTest as _deleteTest, increaseUserScore as _increaseUserScore } from '../../store/actions/testPasser';\nimport { firebase } from '../../firebase/firebase';\nimport { Redirect } from 'react-router-dom';\nimport Loader from '../Loader';\nimport UserTests from '../../containers/Pages/UserTests';\nvar Main = styled.div(_templateObject());\n\nvar TestPassPanel =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TestPassPanel, _Component);\n\n  function TestPassPanel() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, TestPassPanel);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TestPassPanel)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      testEnd: false,\n      test: _this.props.test,\n      user: _this.props.user,\n      time: _this.props.test.currentTime ? _this.props.test.currentTime : _this.props.test.testDuration * 60,\n      currentIndex: _this.props.test.currentQuestionIndex ? _this.props.test.currentQuestionIndex : 0,\n      totalScore: _this.props.test.currentScore ? _this.props.test.currentScore : 0,\n      unmounted: false\n    };\n\n    _this.testEnded = function () {\n      _this.setState({\n        testEnd: true\n      });\n    };\n\n    _this.totalScore = function (score) {\n      _this.setState({\n        totalScore: _this.state.totalScore + score\n      });\n    };\n\n    _this.updatePassingTest = function () {\n      if (_this.props.user) {\n        var userTests = _this.props.user.tests.filter(function (test) {\n          return test.userScore >= 0;\n        });\n\n        var userTest = firebase.database().ref(\"user/\".concat(_this.state.user.id, \"/tests/\").concat(_this.state.test.id));\n        var score = 0;\n        userTest.child('currentScore').on('value', function (snapshot) {\n          score = snapshot.val();\n        });\n        userTest.child('currentScore').set(score + _this.props.userScore);\n        userTest.child('currentTime').set(_this.state.time);\n        userTest.child('currentQuestionIndex').set(_this.state.currentIndex);\n\n        if (_this.state.testEnd) {\n          userTest.update({\n            userScore: _this.props.userScore\n          });\n          var testRef = firebase.database().ref(\"tests/\".concat(_this.props.test.id));\n          userTest.child('currentScore').remove();\n          userTest.child('currentTime').remove();\n          userTest.child('currentQuestionIndex').remove();\n          testRef.child(\"passers\").child(\"\".concat(_this.props.user.id)).set(_objectSpread({}, _this.props.user, {\n            tests: userTests\n          }));\n        }\n      }\n    };\n\n    _this.getTime = function (time) {\n      _this.setState({\n        time: time\n      });\n    };\n\n    _this.getCurrentIndex = function (index) {\n      _this.setState({\n        currentIndex: index\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TestPassPanel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      var userTest = firebase.database().ref(\"user/\".concat(this.state.user.id, \"/tests/\").concat(this.state.test.id));\n      this.score = 0;\n      userTest.child('currentScore').on('value', function (snapshot) {\n        _this2.score = snapshot.val();\n      });\n      console.log(this.score);\n      window.addEventListener('beforeunload', this.updatePassingTest);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.setState({\n        unmounted: true\n      });\n      this.updatePassingTest();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.state.user && this.state.user.type === 'user' ? this.state.test ? React.createElement(Main, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, !this.state.testEnd && this.state.test && React.createElement(TestPasser, {\n        getCurrentIndex: this.getCurrentIndex,\n        getTime: this.getTime,\n        user: this.state.user,\n        totalScore: this.totalScore,\n        testEnded: this.testEnded,\n        test: this.props.test,\n        time: this.state.time,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }), this.state.testEnd && React.createElement(TestFinished, {\n        user: this.props.user,\n        totalScore: this.state.totalScore,\n        test: this.props.test,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      })) : React.createElement(Loader, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }) : React.createElement(Redirect, {\n        to: \"/tests\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return TestPassPanel;\n}(Component);\n\nfunction mapStateToProps(state) {\n  return {\n    userScore: state.testPasser.userScore\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    deleteTest: function deleteTest() {\n      return dispatch(_deleteTest());\n    },\n    increaseUserScore: function increaseUserScore(score) {\n      return dispatch(_increaseUserScore(score));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TestPassPanel);","map":{"version":3,"sources":["C:\\Users\\Gohar\\Desktop\\testing-project\\testing-project\\src\\components\\TestPassPanel\\TestPassPanel.js"],"names":["React","Component","styled","connect","TestFinished","TestPasser","deleteTest","increaseUserScore","firebase","Redirect","Loader","UserTests","Main","div","TestPassPanel","state","testEnd","test","props","user","time","currentTime","testDuration","currentIndex","currentQuestionIndex","totalScore","currentScore","unmounted","testEnded","setState","score","updatePassingTest","userTests","tests","filter","userScore","userTest","database","ref","id","child","on","snapshot","val","set","update","testRef","remove","getTime","getCurrentIndex","index","console","log","window","addEventListener","type","mapStateToProps","testPasser","mapDispatchToProps","dispatch"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,SAASC,UAAU,IAAVA,WAAT,EAAqBC,iBAAiB,IAAjBA,kBAArB,QAA8C,gCAA9C;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;AAEA,IAAMC,IAAI,GAAGV,MAAM,CAACW,GAAV,mBAAV;;IASMC,a;;;;;;;;;;;;;;;;;UACLC,K,GAAQ;AACPC,MAAAA,OAAO,EAAE,KADF;AAEPC,MAAAA,IAAI,EAAE,MAAKC,KAAL,CAAWD,IAFV;AAGPE,MAAAA,IAAI,EAAE,MAAKD,KAAL,CAAWC,IAHV;AAIPC,MAAAA,IAAI,EAAE,MAAKF,KAAL,CAAWD,IAAX,CAAgBI,WAAhB,GAA8B,MAAKH,KAAL,CAAWD,IAAX,CAAgBI,WAA9C,GAA4D,MAAKH,KAAL,CAAWD,IAAX,CAAgBK,YAAhB,GAA+B,EAJ1F;AAKPC,MAAAA,YAAY,EAAE,MAAKL,KAAL,CAAWD,IAAX,CAAgBO,oBAAhB,GAAuC,MAAKN,KAAL,CAAWD,IAAX,CAAgBO,oBAAvD,GAA8E,CALrF;AAMPC,MAAAA,UAAU,EAAE,MAAKP,KAAL,CAAWD,IAAX,CAAgBS,YAAhB,GAA+B,MAAKR,KAAL,CAAWD,IAAX,CAAgBS,YAA/C,GAA8D,CANnE;AAOPC,MAAAA,SAAS,EAAE;AAPJ,K;;UAURC,S,GAAY,YAAM;AACjB,YAAKC,QAAL,CAAc;AAAEb,QAAAA,OAAO,EAAE;AAAX,OAAd;AACA,K;;UAEDS,U,GAAa,UAACK,KAAD,EAAW;AACvB,YAAKD,QAAL,CAAc;AAAEJ,QAAAA,UAAU,EAAE,MAAKV,KAAL,CAAWU,UAAX,GAAwBK;AAAtC,OAAd;AACA,K;;UAYDC,iB,GAAoB,YAAM;AAEzB,UAAI,MAAKb,KAAL,CAAWC,IAAf,EAAqB;AACpB,YAAIa,SAAS,GAAG,MAAKd,KAAL,CAAWC,IAAX,CAAgBc,KAAhB,CAAsBC,MAAtB,CAA6B,UAAAjB,IAAI;AAAA,iBAAIA,IAAI,CAACkB,SAAL,IAAkB,CAAtB;AAAA,SAAjC,CAAhB;;AACA,YAAIC,QAAQ,GAAG5B,QAAQ,CAAC6B,QAAT,GAAoBC,GAApB,gBAAgC,MAAKvB,KAAL,CAAWI,IAAX,CAAgBoB,EAAhD,oBAA4D,MAAKxB,KAAL,CAAWE,IAAX,CAAgBsB,EAA5E,EAAf;AACA,YAAIT,KAAK,GAAG,CAAZ;AACCM,QAAAA,QAAQ,CAACI,KAAT,CAAe,cAAf,EAA+BC,EAA/B,CAAkC,OAAlC,EAA2C,UAACC,QAAD,EAAc;AACzDZ,UAAAA,KAAK,GAAGY,QAAQ,CAACC,GAAT,EAAR;AACA,SAFA;AAIDP,QAAAA,QAAQ,CAACI,KAAT,CAAe,cAAf,EAA+BI,GAA/B,CAAmCd,KAAK,GAAG,MAAKZ,KAAL,CAAWiB,SAAtD;AACAC,QAAAA,QAAQ,CAACI,KAAT,CAAe,aAAf,EAA8BI,GAA9B,CAAkC,MAAK7B,KAAL,CAAWK,IAA7C;AACAgB,QAAAA,QAAQ,CAACI,KAAT,CAAe,sBAAf,EAAuCI,GAAvC,CAA2C,MAAK7B,KAAL,CAAWQ,YAAtD;;AAEA,YAAI,MAAKR,KAAL,CAAWC,OAAf,EAAwB;AACvBoB,UAAAA,QAAQ,CAACS,MAAT,CAAgB;AAAEV,YAAAA,SAAS,EAAE,MAAKjB,KAAL,CAAWiB;AAAxB,WAAhB;AACA,cAAIW,OAAO,GAAGtC,QAAQ,CAAC6B,QAAT,GAAoBC,GAApB,iBAAiC,MAAKpB,KAAL,CAAWD,IAAX,CAAgBsB,EAAjD,EAAd;AACAH,UAAAA,QAAQ,CAACI,KAAT,CAAe,cAAf,EAA+BO,MAA/B;AACAX,UAAAA,QAAQ,CAACI,KAAT,CAAe,aAAf,EAA8BO,MAA9B;AACAX,UAAAA,QAAQ,CAACI,KAAT,CAAe,sBAAf,EAAuCO,MAAvC;AACAD,UAAAA,OAAO,CAACN,KAAR,YAAyBA,KAAzB,WAAkC,MAAKtB,KAAL,CAAWC,IAAX,CAAgBoB,EAAlD,GAAwDK,GAAxD,mBAAiE,MAAK1B,KAAL,CAAWC,IAA5E;AAAkFc,YAAAA,KAAK,EAAED;AAAzF;AAEA;AACD;AAED,K;;UAEDgB,O,GAAU,UAAC5B,IAAD,EAAU;AACnB,YAAKS,QAAL,CAAc;AAAET,QAAAA,IAAI,EAAEA;AAAR,OAAd;AACA,K;;UAED6B,e,GAAkB,UAACC,KAAD,EAAW;AAC5B,YAAKrB,QAAL,CAAc;AAAEN,QAAAA,YAAY,EAAE2B;AAAhB,OAAd;AACA,K;;;;;;;wCA3CmB;AAAA;;AACnB,UAAId,QAAQ,GAAG5B,QAAQ,CAAC6B,QAAT,GAAoBC,GAApB,gBAAgC,KAAKvB,KAAL,CAAWI,IAAX,CAAgBoB,EAAhD,oBAA4D,KAAKxB,KAAL,CAAWE,IAAX,CAAgBsB,EAA5E,EAAf;AACC,WAAKT,KAAL,GAAa,CAAb;AACCM,MAAAA,QAAQ,CAACI,KAAT,CAAe,cAAf,EAA+BC,EAA/B,CAAkC,OAAlC,EAA2C,UAACC,QAAD,EAAc;AACzD,QAAA,MAAI,CAACZ,KAAL,GAAaY,QAAQ,CAACC,GAAT,EAAb;AACA,OAFA;AAGDQ,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKtB,KAAjB;AACDuB,MAAAA,MAAM,CAACC,gBAAP,CAAwB,cAAxB,EAAwC,KAAKvB,iBAA7C;AACA;;;2CAqCsB;AACtB,WAAKF,QAAL,CAAc;AAAEF,QAAAA,SAAS,EAAE;AAAb,OAAd;AACA,WAAKI,iBAAL;AAEA;;;6BACQ;AACR,aACC,KAAKhB,KAAL,CAAWI,IAAX,IAAmB,KAAKJ,KAAL,CAAWI,IAAX,CAAgBoC,IAAhB,KAAyB,MAA5C,GACC,KAAKxC,KAAL,CAAWE,IAAX,GACC,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE,CAAC,KAAKF,KAAL,CAAWC,OAAZ,IAAuB,KAAKD,KAAL,CAAWE,IAAlC,IACA,oBAAC,UAAD;AACC,QAAA,eAAe,EAAE,KAAKgC,eADvB;AAEC,QAAA,OAAO,EAAE,KAAKD,OAFf;AAGC,QAAA,IAAI,EAAE,KAAKjC,KAAL,CAAWI,IAHlB;AAIC,QAAA,UAAU,EAAE,KAAKM,UAJlB;AAKC,QAAA,SAAS,EAAE,KAAKG,SALjB;AAMC,QAAA,IAAI,EAAE,KAAKV,KAAL,CAAWD,IANlB;AAOC,QAAA,IAAI,EAAE,KAAKF,KAAL,CAAWK,IAPlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHF,EAcE,KAAKL,KAAL,CAAWC,OAAX,IACA,oBAAC,YAAD;AAAc,QAAA,IAAI,EAAE,KAAKE,KAAL,CAAWC,IAA/B;AACC,QAAA,UAAU,EAAE,KAAKJ,KAAL,CAAWU,UADxB;AAEC,QAAA,IAAI,EAAE,KAAKP,KAAL,CAAWD,IAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAfF,CADD,GAsBG,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAvBJ,GAwBG,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAzBJ;AA2BA;;;;EAjG0BhB,S;;AAoG5B,SAASuD,eAAT,CAAyBzC,KAAzB,EAAgC;AAC/B,SAAO;AACNoB,IAAAA,SAAS,EAAEpB,KAAK,CAAC0C,UAAN,CAAiBtB;AADtB,GAAP;AAGA;;AACD,SAASuB,kBAAT,CAA4BC,QAA5B,EAAsC;AACrC,SAAO;AACNrD,IAAAA,UAAU,EAAE;AAAA,aAAMqD,QAAQ,CAACrD,WAAU,EAAX,CAAd;AAAA,KADN;AAENC,IAAAA,iBAAiB,EAAE,2BAACuB,KAAD;AAAA,aAAW6B,QAAQ,CAACpD,kBAAiB,CAACuB,KAAD,CAAlB,CAAnB;AAAA;AAFb,GAAP;AAIA;;AAED,eAAe3B,OAAO,CAACqD,eAAD,EAAkBE,kBAAlB,CAAP,CAA6C5C,aAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport styled from 'styled-components'\r\nimport { connect } from 'react-redux';\r\nimport TestFinished from './TestFinished';\r\nimport TestPasser from './TestPasser';\r\nimport { deleteTest, increaseUserScore } from '../../store/actions/testPasser';\r\nimport { firebase } from '../../firebase/firebase';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Loader from '../Loader';\r\nimport UserTests from '../../containers/Pages/UserTests';\r\n\r\nconst Main = styled.div`\r\n\tmargin: auto;\r\n\tmargin-top: 190px;\r\n\tmax-width: 1200px;\r\n\tfont-size: 24px;\r\n\tcolor: white;\r\n\toverflow: none;\r\n`;\r\n\r\nclass TestPassPanel extends Component {\r\n\tstate = {\r\n\t\ttestEnd: false,\r\n\t\ttest: this.props.test,\r\n\t\tuser: this.props.user,\r\n\t\ttime: this.props.test.currentTime ? this.props.test.currentTime : this.props.test.testDuration * 60,\r\n\t\tcurrentIndex: this.props.test.currentQuestionIndex ? this.props.test.currentQuestionIndex : 0,\r\n\t\ttotalScore: this.props.test.currentScore ? this.props.test.currentScore : 0,\r\n\t\tunmounted: false\r\n\t}\r\n\r\n\ttestEnded = () => {\r\n\t\tthis.setState({ testEnd: true });\r\n\t}\r\n\r\n\ttotalScore = (score) => {\r\n\t\tthis.setState({ totalScore: this.state.totalScore + score });\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tlet userTest = firebase.database().ref(`user/${this.state.user.id}/tests/${this.state.test.id}`);\r\n\t\t\tthis.score = 0;\r\n\t\t\t\tuserTest.child('currentScore').on('value', (snapshot) => {\r\n\t\t\t\tthis.score = snapshot.val()\r\n\t\t\t});\r\n\t\t\tconsole.log(this.score);\r\n\t\twindow.addEventListener('beforeunload', this.updatePassingTest);\r\n\t}\r\n\r\n\tupdatePassingTest = () => {\r\n\r\n\t\tif (this.props.user) {\r\n\t\t\tlet userTests = this.props.user.tests.filter(test => test.userScore >= 0);\r\n\t\t\tlet userTest = firebase.database().ref(`user/${this.state.user.id}/tests/${this.state.test.id}`);\r\n\t\t\tlet score = 0;\r\n\t\t\t\tuserTest.child('currentScore').on('value', (snapshot) => {\r\n\t\t\t\tscore = snapshot.val()\r\n\t\t\t});\r\n\t\t\r\n\t\t\tuserTest.child('currentScore').set(score + this.props.userScore);\r\n\t\t\tuserTest.child('currentTime').set(this.state.time);\r\n\t\t\tuserTest.child('currentQuestionIndex').set(this.state.currentIndex);\r\n\r\n\t\t\tif (this.state.testEnd) {\r\n\t\t\t\tuserTest.update({ userScore: this.props.userScore });\r\n\t\t\t\tlet testRef = firebase.database().ref(`tests/${this.props.test.id}`);\r\n\t\t\t\tuserTest.child('currentScore').remove();\r\n\t\t\t\tuserTest.child('currentTime').remove();\r\n\t\t\t\tuserTest.child('currentQuestionIndex').remove();\r\n\t\t\t\ttestRef.child(`passers`).child(`${this.props.user.id}`).set({ ...this.props.user, tests: userTests });\r\n\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgetTime = (time) => {\r\n\t\tthis.setState({ time: time });\r\n\t}\r\n\r\n\tgetCurrentIndex = (index) => {\r\n\t\tthis.setState({ currentIndex: index });\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tthis.setState({ unmounted: true });\r\n\t\tthis.updatePassingTest();\r\n\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\tthis.state.user && this.state.user.type === 'user' ?\r\n\t\t\t\tthis.state.test ?\r\n\t\t\t\t\t<Main>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t!this.state.testEnd && this.state.test &&\r\n\t\t\t\t\t\t\t<TestPasser\r\n\t\t\t\t\t\t\t\tgetCurrentIndex={this.getCurrentIndex}\r\n\t\t\t\t\t\t\t\tgetTime={this.getTime}\r\n\t\t\t\t\t\t\t\tuser={this.state.user}\r\n\t\t\t\t\t\t\t\ttotalScore={this.totalScore}\r\n\t\t\t\t\t\t\t\ttestEnded={this.testEnded}\r\n\t\t\t\t\t\t\t\ttest={this.props.test}\r\n\t\t\t\t\t\t\t\ttime={this.state.time}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.state.testEnd &&\r\n\t\t\t\t\t\t\t<TestFinished user={this.props.user}\r\n\t\t\t\t\t\t\t\ttotalScore={this.state.totalScore}\r\n\t\t\t\t\t\t\t\ttest={this.props.test}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t</Main>\r\n\t\t\t\t\t: <Loader />\r\n\t\t\t\t: <Redirect to='/tests' />\r\n\t\t);\r\n\t}\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tuserScore: state.testPasser.userScore,\r\n\t}\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n\treturn {\r\n\t\tdeleteTest: () => dispatch(deleteTest()),\r\n\t\tincreaseUserScore: (score) => dispatch(increaseUserScore(score)),\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TestPassPanel)\r\n\r\n"]},"metadata":{},"sourceType":"module"}