{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Gohar\\\\Desktop\\\\testing-project\\\\testing-project\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport { getCompaniesStarted, getCompaniesSuccess, getTestsStarted, getTestsSuccess, getUsersStarted, getUsersSuccess } from '../actions/appAction';\nimport { firebase } from '../../firebase/firebase';\nexport var getTests = function getTests() {\n  return function (dispatch) {\n    dispatch(getTestsStarted());\n    firebase.database().ref('tests').on('value', function (snapshot) {\n      var tests = [];\n      var passers = {};\n      snapshot.forEach(function (childSnapshot) {\n        if (childSnapshot.hasChild('passers')) {\n          childSnapshot.child('passers').forEach(function (snapshot1) {\n            var key = snapshot1.key;\n            {\n              passers = _objectSpread({}, passers, {\n                key: _objectSpread({}, snapshot1.val())\n              });\n            }\n          });\n        } else {\n          passers = [];\n        }\n\n        if (childSnapshot.hasChild('passers')) {\n          tests.push(_objectSpread({\n            id: childSnapshot.key\n          }, childSnapshot.val(), {\n            passers: passers\n          }));\n        } else {\n          tests.push(_objectSpread({\n            id: childSnapshot.key\n          }, childSnapshot.val()));\n        }\n      });\n      var filteredTests = [];\n      tests.sort(function (a, b) {\n        return b.testCreateDate - a.testCreateDate;\n      });\n      filteredTests = tests.filter(function (test) {\n        return !test.deleted;\n      });\n      dispatch(getTestsSuccess(filteredTests));\n    });\n  };\n};\nexport var getCompanies = function getCompanies() {\n  return function (dispatch) {\n    dispatch(getCompaniesStarted());\n    firebase.database().ref('companies').on('value', function (snapshot) {\n      var companies = [];\n      snapshot.forEach(function (childSnapshot) {\n        companies.push(_objectSpread({\n          id: childSnapshot.key\n        }, childSnapshot.val()));\n      });\n      dispatch(getCompaniesSuccess(companies));\n    });\n  };\n};\nexport var getUsers = function getUsers() {\n  return function (dispatch) {\n    dispatch(getUsersStarted());\n    firebase.database().ref('user').on('value', function (snapshot) {\n      var users = [];\n      var tests = [];\n      snapshot.forEach(function (childSnapshot) {\n        if (childSnapshot.hasChild('tests')) {\n          childSnapshot.child('tests').forEach(function (snapshot1) {\n            tests.push(_objectSpread({\n              id: snapshot1.key\n            }, snapshot1.val()));\n          });\n        } else {\n          tests = [];\n        }\n\n        if (childSnapshot.hasChild('tests')) {\n          users.push(_objectSpread({\n            id: childSnapshot.key\n          }, childSnapshot.val(), {\n            tests: tests\n          }));\n        } else {\n          users.push(_objectSpread({\n            id: childSnapshot.key\n          }, childSnapshot.val()));\n        }\n      });\n      dispatch(getUsersSuccess(users));\n    });\n  };\n};","map":{"version":3,"sources":["C:\\Users\\Gohar\\Desktop\\testing-project\\testing-project\\src\\store\\thunks\\thunks.js"],"names":["getCompaniesStarted","getCompaniesSuccess","getTestsStarted","getTestsSuccess","getUsersStarted","getUsersSuccess","firebase","getTests","dispatch","database","ref","on","snapshot","tests","passers","forEach","childSnapshot","hasChild","child","snapshot1","key","val","push","id","filteredTests","sort","a","b","testCreateDate","filter","test","deleted","getCompanies","companies","getUsers","users"],"mappings":"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","sourcesContent":["import {\r\n    getCompaniesStarted,\r\n    getCompaniesSuccess,\r\n    getTestsStarted,\r\n    getTestsSuccess,\r\n    getUsersStarted,\r\n    getUsersSuccess,\r\n\r\n} from '../actions/appAction';\r\nimport { firebase } from '../../firebase/firebase';\r\n\r\nexport const getTests = () => {\r\n    return dispatch => {\r\n        dispatch(getTestsStarted());\r\n\r\n        firebase.database().ref('tests').on('value', (snapshot) => {\r\n            let tests = [];\r\n            let passers = {};\r\n            snapshot.forEach(childSnapshot => {\r\n                if (childSnapshot.hasChild('passers')) {\r\n                    childSnapshot.child('passers').forEach(snapshot1 => {\r\n                        let key = snapshot1.key;\r\n                            {\r\n                            passers = {\r\n                                ...passers,\r\n                                key: {...snapshot1.val()},\r\n                            }\r\n                        }\r\n                    })\r\n                } else {\r\n                    passers = [];\r\n                }\r\n                if (childSnapshot.hasChild('passers')) {\r\n                    tests.push({\r\n                        id: childSnapshot.key,\r\n                        ...childSnapshot.val(),\r\n                        passers\r\n                    })\r\n                } else {\r\n                    tests.push({\r\n                        id: childSnapshot.key,\r\n                        ...childSnapshot.val(),\r\n                    })\r\n                }\r\n\r\n            });\r\n            let filteredTests = [];\r\n            tests.sort(function (a, b) { return b.testCreateDate - a.testCreateDate });\r\n            filteredTests = tests.filter(test => !test.deleted)\r\n\r\n\r\n            dispatch(getTestsSuccess(filteredTests));\r\n        });\r\n    }\r\n};\r\n\r\nexport const getCompanies = () => {\r\n    return dispatch => {\r\n        dispatch(getCompaniesStarted());\r\n\r\n        firebase.database().ref('companies').on('value', (snapshot) => {\r\n            let companies = [];\r\n\r\n            snapshot.forEach(childSnapshot => {\r\n                companies.push({\r\n                    id: childSnapshot.key,\r\n                    ...childSnapshot.val()\r\n                })\r\n            });\r\n\r\n            dispatch(getCompaniesSuccess(companies));\r\n        });\r\n    }\r\n};\r\n\r\nexport const getUsers = () => {\r\n    return dispatch => {\r\n        dispatch(getUsersStarted());\r\n\r\n        firebase.database().ref('user').on('value', (snapshot) => {\r\n            let users = [];\r\n            let tests = [];\r\n            snapshot.forEach(childSnapshot => {\r\n                if (childSnapshot.hasChild('tests')) {\r\n                    childSnapshot.child('tests').forEach(snapshot1 => {\r\n                        tests.push({\r\n                            id: snapshot1.key,\r\n                            ...snapshot1.val()\r\n                        })\r\n                    })\r\n                } else {\r\n                    tests = [];\r\n                }\r\n                if (childSnapshot.hasChild('tests')) {\r\n                    users.push({\r\n                        id: childSnapshot.key,\r\n                        ...childSnapshot.val(),\r\n                        tests\r\n                    })\r\n                } else {\r\n                    users.push({\r\n                        id: childSnapshot.key,\r\n                        ...childSnapshot.val(),\r\n\r\n                    })\r\n                }\r\n\r\n            });\r\n            dispatch(getUsersSuccess(users));\r\n        });\r\n    }\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}